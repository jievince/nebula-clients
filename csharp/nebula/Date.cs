/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula
{

  [Serializable]
  public partial class Date : TBase
  {
    private short year;
    private byte month;
    private byte day;

    public short Year
    {
      get
      {
        return year;
      }
      set
      {
        __isset.year = true;
        this.year = value;
      }
    }

    public byte Month
    {
      get
      {
        return month;
      }
      set
      {
        __isset.month = true;
        this.month = value;
      }
    }

    public byte Day
    {
      get
      {
        return day;
      }
      set
      {
        __isset.day = true;
        this.day = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool year;
      public bool month;
      public bool day;
    }

    public Date() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              this.year = iprot.ReadI16();
              this.__isset.year = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              this.month = iprot.ReadByte();
              this.__isset.month = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              this.day = iprot.ReadByte();
              this.__isset.day = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Date");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.year) {
        field.Name = "year";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(this.year);
        oprot.WriteFieldEnd();
      }
      if (__isset.month) {
        field.Name = "month";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(this.month);
        oprot.WriteFieldEnd();
      }
      if (__isset.day) {
        field.Name = "day";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(this.day);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Date(");
      sb.Append("year: ");
      sb.Append(this.year);
      sb.Append(",month: ");
      sb.Append(this.month);
      sb.Append(",day: ");
      sb.Append(this.day);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
