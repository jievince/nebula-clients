/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula
{

  [Serializable]
  public partial class Edge : TBase
  {
    private byte[] src;
    private byte[] dst;
    private int type;
    private byte[] name;
    private long ranking;
    private Dictionary<byte[], Value> props;

    public byte[] Src
    {
      get
      {
        return src;
      }
      set
      {
        __isset.src = true;
        this.src = value;
      }
    }

    public byte[] Dst
    {
      get
      {
        return dst;
      }
      set
      {
        __isset.dst = true;
        this.dst = value;
      }
    }

    public int Type
    {
      get
      {
        return type;
      }
      set
      {
        __isset.type = true;
        this.type = value;
      }
    }

    public byte[] Name
    {
      get
      {
        return name;
      }
      set
      {
        __isset.name = true;
        this.name = value;
      }
    }

    public long Ranking
    {
      get
      {
        return ranking;
      }
      set
      {
        __isset.ranking = true;
        this.ranking = value;
      }
    }

    public Dictionary<byte[], Value> Props
    {
      get
      {
        return props;
      }
      set
      {
        __isset.props = true;
        this.props = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool src;
      public bool dst;
      public bool type;
      public bool name;
      public bool ranking;
      public bool props;
    }

    public Edge() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.src = iprot.ReadBinary();
              this.__isset.src = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.dst = iprot.ReadBinary();
              this.__isset.dst = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              this.type = iprot.ReadI32();
              this.__isset.type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              this.name = iprot.ReadBinary();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              this.ranking = iprot.ReadI64();
              this.__isset.ranking = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                this.props = new Dictionary<byte[], Value>();
                TMap _map34 = iprot.ReadMapBegin();
                for( int _i35 = 0; _i35 < _map34.Count; ++_i35)
                {
                  byte[] _key36;
                  Value _val37;
                  _key36 = iprot.ReadBinary();
                  _val37 = new Value();
                  _val37.Read(iprot);
                  this.props[_key36] = _val37;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.props = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Edge");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.src != null && __isset.src) {
        field.Name = "src";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.src);
        oprot.WriteFieldEnd();
      }
      if (this.dst != null && __isset.dst) {
        field.Name = "dst";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.dst);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.type);
        oprot.WriteFieldEnd();
      }
      if (this.name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.name);
        oprot.WriteFieldEnd();
      }
      if (__isset.ranking) {
        field.Name = "ranking";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.ranking);
        oprot.WriteFieldEnd();
      }
      if (this.props != null && __isset.props) {
        field.Name = "props";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, this.props.Count));
          foreach (byte[] _iter38 in this.props.Keys)
          {
            oprot.WriteBinary(_iter38);
            this.props[_iter38].Write(oprot);
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Edge(");
      sb.Append("src: ");
      sb.Append(this.src);
      sb.Append(",dst: ");
      sb.Append(this.dst);
      sb.Append(",type: ");
      sb.Append(this.type);
      sb.Append(",name: ");
      sb.Append(this.name);
      sb.Append(",ranking: ");
      sb.Append(this.ranking);
      sb.Append(",props: ");
      sb.Append(this.props);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
