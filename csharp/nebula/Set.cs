/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula
{

  [Serializable]
  public partial class Set : TBase
  {
    private THashSet<Value> values;

    public THashSet<Value> Values
    {
      get
      {
        return values;
      }
      set
      {
        __isset.values = true;
        this.values = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool values;
    }

    public Set() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Set) {
              {
                this.values = new THashSet<Value>();
                TSet _set9 = iprot.ReadSetBegin();
                for( int _i10 = 0; _i10 < _set9.Count; ++_i10)
                {
                  Value _elem11 = new Value();
                  _elem11 = new Value();
                  _elem11.Read(iprot);
                  this.values.Add(_elem11);
                }
                iprot.ReadSetEnd();
              }
              this.__isset.values = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Set");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.values != null && __isset.values) {
        field.Name = "values";
        field.Type = TType.Set;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, this.values.Count));
          foreach (Value _iter12 in this.values)
          {
            _iter12.Write(oprot);
            oprot.WriteSetEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Set(");
      sb.Append("values: ");
      sb.Append(this.values);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
