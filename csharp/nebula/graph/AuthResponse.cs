/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.graph
{

  [Serializable]
  public partial class AuthResponse : TBase
  {
    private ErrorCode error_code;
    private byte[] error_msg;
    private long session_id;

    public ErrorCode Error_code
    {
      get
      {
        return error_code;
      }
      set
      {
        __isset.error_code = true;
        this.error_code = value;
      }
    }

    public byte[] Error_msg
    {
      get
      {
        return error_msg;
      }
      set
      {
        __isset.error_msg = true;
        this.error_msg = value;
      }
    }

    public long Session_id
    {
      get
      {
        return session_id;
      }
      set
      {
        __isset.session_id = true;
        this.session_id = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool error_code;
      public bool error_msg;
      public bool session_id;
    }

    public AuthResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.error_code = (ErrorCode)iprot.ReadI32();
              this.__isset.error_code = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.error_msg = iprot.ReadBinary();
              this.__isset.error_msg = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.session_id = iprot.ReadI64();
              this.__isset.session_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AuthResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.error_code) {
        field.Name = "error_code";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.error_code);
        oprot.WriteFieldEnd();
      }
      if (this.error_msg != null && __isset.error_msg) {
        field.Name = "error_msg";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.error_msg);
        oprot.WriteFieldEnd();
      }
      if (__isset.session_id) {
        field.Name = "session_id";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.session_id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AuthResponse(");
      sb.Append("error_code: ");
      sb.Append(this.error_code);
      sb.Append(",error_msg: ");
      sb.Append(this.error_msg);
      sb.Append(",session_id: ");
      sb.Append(this.session_id);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
