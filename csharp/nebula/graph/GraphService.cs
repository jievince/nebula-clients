/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.graph
{
  public class GraphService {
    public interface Iface {
      AuthResponse authenticate(byte[] username, byte[] password);
      void signout(long sessionId);
      ExecutionResponse execute(long sessionId, byte[] stmt);
      byte[] executeJson(long sessionId, byte[] stmt);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public AuthResponse authenticate(byte[] username, byte[] password)
      {
        send_authenticate(username, password);
        return recv_authenticate();
      }

      public void send_authenticate(byte[] username, byte[] password)
      {
        oprot_.WriteMessageBegin(new TMessage("authenticate", TMessageType.Call, seqid_));
        authenticate_args args = new authenticate_args();
        args.Username = username;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AuthResponse recv_authenticate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        authenticate_result result = new authenticate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticate failed: unknown result");
      }

      public void signout(long sessionId)
      {
        send_signout(sessionId);
      }

      public void send_signout(long sessionId)
      {
        oprot_.WriteMessageBegin(new TMessage("signout", TMessageType.Call, seqid_));
        signout_args args = new signout_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecutionResponse execute(long sessionId, byte[] stmt)
      {
        send_execute(sessionId, stmt);
        return recv_execute();
      }

      public void send_execute(long sessionId, byte[] stmt)
      {
        oprot_.WriteMessageBegin(new TMessage("execute", TMessageType.Call, seqid_));
        execute_args args = new execute_args();
        args.SessionId = sessionId;
        args.Stmt = stmt;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecutionResponse recv_execute()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        execute_result result = new execute_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "execute failed: unknown result");
      }

      public byte[] executeJson(long sessionId, byte[] stmt)
      {
        send_executeJson(sessionId, stmt);
        return recv_executeJson();
      }

      public void send_executeJson(long sessionId, byte[] stmt)
      {
        oprot_.WriteMessageBegin(new TMessage("executeJson", TMessageType.Call, seqid_));
        executeJson_args args = new executeJson_args();
        args.SessionId = sessionId;
        args.Stmt = stmt;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_executeJson()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        executeJson_result result = new executeJson_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeJson failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["authenticate"] = authenticate_Process;
        processMap_["signout"] = signout_Process;
        processMap_["execute"] = execute_Process;
        processMap_["executeJson"] = executeJson_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void authenticate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        authenticate_args args = new authenticate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        authenticate_result result = new authenticate_result();
        result.Success = iface_.authenticate(args.Username, args.Password);
        oprot.WriteMessageBegin(new TMessage("authenticate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void signout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        signout_args args = new signout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.signout(args.SessionId);
        return;
      }
      public void execute_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        execute_args args = new execute_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        execute_result result = new execute_result();
        result.Success = iface_.execute(args.SessionId, args.Stmt);
        oprot.WriteMessageBegin(new TMessage("execute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void executeJson_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        executeJson_args args = new executeJson_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        executeJson_result result = new executeJson_result();
        result.Success = iface_.executeJson(args.SessionId, args.Stmt);
        oprot.WriteMessageBegin(new TMessage("executeJson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class authenticate_args : TBase
    {
      private byte[] username;
      private byte[] password;

      public byte[] Username
      {
        get
        {
          return username;
        }
        set
        {
          __isset.username = true;
          this.username = value;
        }
      }

      public byte[] Password
      {
        get
        {
          return password;
        }
        set
        {
          __isset.password = true;
          this.password = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool username;
        public bool password;
      }

      public authenticate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.username = iprot.ReadBinary();
                this.__isset.username = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.password = iprot.ReadBinary();
                this.__isset.password = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("authenticate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.username);
          oprot.WriteFieldEnd();
        }
        if (this.password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.password);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("authenticate_args(");
        sb.Append("username: ");
        sb.Append(this.username);
        sb.Append(",password: ");
        sb.Append(this.password);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class authenticate_result : TBase
    {
      private AuthResponse success;

      public AuthResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public authenticate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AuthResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("authenticate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("authenticate_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class signout_args : TBase
    {
      private long sessionId;

      public long SessionId
      {
        get
        {
          return sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this.sessionId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool sessionId;
      }

      public signout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                this.sessionId = iprot.ReadI64();
                this.__isset.sessionId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("signout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(this.sessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("signout_args(");
        sb.Append("sessionId: ");
        sb.Append(this.sessionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class execute_args : TBase
    {
      private long sessionId;
      private byte[] stmt;

      public long SessionId
      {
        get
        {
          return sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this.sessionId = value;
        }
      }

      public byte[] Stmt
      {
        get
        {
          return stmt;
        }
        set
        {
          __isset.stmt = true;
          this.stmt = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool sessionId;
        public bool stmt;
      }

      public execute_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                this.sessionId = iprot.ReadI64();
                this.__isset.sessionId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.stmt = iprot.ReadBinary();
                this.__isset.stmt = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("execute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(this.sessionId);
          oprot.WriteFieldEnd();
        }
        if (this.stmt != null && __isset.stmt) {
          field.Name = "stmt";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.stmt);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("execute_args(");
        sb.Append("sessionId: ");
        sb.Append(this.sessionId);
        sb.Append(",stmt: ");
        sb.Append(this.stmt);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class execute_result : TBase
    {
      private ExecutionResponse success;

      public ExecutionResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public execute_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecutionResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("execute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("execute_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class executeJson_args : TBase
    {
      private long sessionId;
      private byte[] stmt;

      public long SessionId
      {
        get
        {
          return sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this.sessionId = value;
        }
      }

      public byte[] Stmt
      {
        get
        {
          return stmt;
        }
        set
        {
          __isset.stmt = true;
          this.stmt = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool sessionId;
        public bool stmt;
      }

      public executeJson_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                this.sessionId = iprot.ReadI64();
                this.__isset.sessionId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.stmt = iprot.ReadBinary();
                this.__isset.stmt = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("executeJson_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(this.sessionId);
          oprot.WriteFieldEnd();
        }
        if (this.stmt != null && __isset.stmt) {
          field.Name = "stmt";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.stmt);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("executeJson_args(");
        sb.Append("sessionId: ");
        sb.Append(this.sessionId);
        sb.Append(",stmt: ");
        sb.Append(this.stmt);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class executeJson_result : TBase
    {
      private byte[] success;

      public byte[] Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public executeJson_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                this.success = iprot.ReadBinary();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("executeJson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(this.success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("executeJson_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
