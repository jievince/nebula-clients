/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.graph
{

  [Serializable]
  public partial class PlanDescription : TBase
  {
    private List<PlanNodeDescription> plan_node_descs;
    private Dictionary<long, long> node_index_map;
    private byte[] format;

    public List<PlanNodeDescription> Plan_node_descs
    {
      get
      {
        return plan_node_descs;
      }
      set
      {
        __isset.plan_node_descs = true;
        this.plan_node_descs = value;
      }
    }

    public Dictionary<long, long> Node_index_map
    {
      get
      {
        return node_index_map;
      }
      set
      {
        __isset.node_index_map = true;
        this.node_index_map = value;
      }
    }

    public byte[] Format
    {
      get
      {
        return format;
      }
      set
      {
        __isset.format = true;
        this.format = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool plan_node_descs;
      public bool node_index_map;
      public bool format;
    }

    public PlanDescription() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                this.plan_node_descs = new List<PlanNodeDescription>();
                TList _list17 = iprot.ReadListBegin();
                for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                {
                  PlanNodeDescription _elem19 = new PlanNodeDescription();
                  _elem19 = new PlanNodeDescription();
                  _elem19.Read(iprot);
                  this.plan_node_descs.Add(_elem19);
                }
                iprot.ReadListEnd();
              }
              this.__isset.plan_node_descs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                this.node_index_map = new Dictionary<long, long>();
                TMap _map20 = iprot.ReadMapBegin();
                for( int _i21 = 0; _i21 < _map20.Count; ++_i21)
                {
                  long _key22;
                  long _val23;
                  _key22 = iprot.ReadI64();
                  _val23 = iprot.ReadI64();
                  this.node_index_map[_key22] = _val23;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.node_index_map = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              this.format = iprot.ReadBinary();
              this.__isset.format = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlanDescription");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.plan_node_descs != null && __isset.plan_node_descs) {
        field.Name = "plan_node_descs";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.plan_node_descs.Count));
          foreach (PlanNodeDescription _iter24 in this.plan_node_descs)
          {
            _iter24.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.node_index_map != null && __isset.node_index_map) {
        field.Name = "node_index_map";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.I64, this.node_index_map.Count));
          foreach (long _iter25 in this.node_index_map.Keys)
          {
            oprot.WriteI64(_iter25);
            oprot.WriteI64(this.node_index_map[_iter25]);
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.format != null && __isset.format) {
        field.Name = "format";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.format);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlanDescription(");
      sb.Append("plan_node_descs: ");
      sb.Append(this.plan_node_descs);
      sb.Append(",node_index_map: ");
      sb.Append(this.node_index_map);
      sb.Append(",format: ");
      sb.Append(this.format);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
