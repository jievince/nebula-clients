/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.graph
{

  [Serializable]
  public partial class ProfilingStats : TBase
  {
    private long rows;
    private long exec_duration_in_us;
    private long total_duration_in_us;
    private Dictionary<byte[], byte[]> other_stats;

    public long Rows
    {
      get
      {
        return rows;
      }
      set
      {
        __isset.rows = true;
        this.rows = value;
      }
    }

    public long Exec_duration_in_us
    {
      get
      {
        return exec_duration_in_us;
      }
      set
      {
        __isset.exec_duration_in_us = true;
        this.exec_duration_in_us = value;
      }
    }

    public long Total_duration_in_us
    {
      get
      {
        return total_duration_in_us;
      }
      set
      {
        __isset.total_duration_in_us = true;
        this.total_duration_in_us = value;
      }
    }

    public Dictionary<byte[], byte[]> Other_stats
    {
      get
      {
        return other_stats;
      }
      set
      {
        __isset.other_stats = true;
        this.other_stats = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool rows;
      public bool exec_duration_in_us;
      public bool total_duration_in_us;
      public bool other_stats;
    }

    public ProfilingStats() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              this.rows = iprot.ReadI64();
              this.__isset.rows = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              this.exec_duration_in_us = iprot.ReadI64();
              this.__isset.exec_duration_in_us = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.total_duration_in_us = iprot.ReadI64();
              this.__isset.total_duration_in_us = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                this.other_stats = new Dictionary<byte[], byte[]>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  byte[] _key2;
                  byte[] _val3;
                  _key2 = iprot.ReadBinary();
                  _val3 = iprot.ReadBinary();
                  this.other_stats[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.other_stats = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ProfilingStats");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.rows) {
        field.Name = "rows";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.rows);
        oprot.WriteFieldEnd();
      }
      if (__isset.exec_duration_in_us) {
        field.Name = "exec_duration_in_us";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.exec_duration_in_us);
        oprot.WriteFieldEnd();
      }
      if (__isset.total_duration_in_us) {
        field.Name = "total_duration_in_us";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.total_duration_in_us);
        oprot.WriteFieldEnd();
      }
      if (this.other_stats != null && __isset.other_stats) {
        field.Name = "other_stats";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, this.other_stats.Count));
          foreach (byte[] _iter4 in this.other_stats.Keys)
          {
            oprot.WriteBinary(_iter4);
            oprot.WriteBinary(this.other_stats[_iter4]);
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ProfilingStats(");
      sb.Append("rows: ");
      sb.Append(this.rows);
      sb.Append(",exec_duration_in_us: ");
      sb.Append(this.exec_duration_in_us);
      sb.Append(",total_duration_in_us: ");
      sb.Append(this.total_duration_in_us);
      sb.Append(",other_stats: ");
      sb.Append(this.other_stats);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
