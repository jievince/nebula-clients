/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{

  [Serializable]
  public partial class AdminJobResult : TBase
  {
    private int job_id;
    private List<JobDesc> job_desc;
    private List<TaskDesc> task_desc;
    private int recovered_job_num;

    public int Job_id
    {
      get
      {
        return job_id;
      }
      set
      {
        __isset.job_id = true;
        this.job_id = value;
      }
    }

    public List<JobDesc> Job_desc
    {
      get
      {
        return job_desc;
      }
      set
      {
        __isset.job_desc = true;
        this.job_desc = value;
      }
    }

    public List<TaskDesc> Task_desc
    {
      get
      {
        return task_desc;
      }
      set
      {
        __isset.task_desc = true;
        this.task_desc = value;
      }
    }

    public int Recovered_job_num
    {
      get
      {
        return recovered_job_num;
      }
      set
      {
        __isset.recovered_job_num = true;
        this.recovered_job_num = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool job_id;
      public bool job_desc;
      public bool task_desc;
      public bool recovered_job_num;
    }

    public AdminJobResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.job_id = iprot.ReadI32();
              this.__isset.job_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                this.job_desc = new List<JobDesc>();
                TList _list34 = iprot.ReadListBegin();
                for( int _i35 = 0; _i35 < _list34.Count; ++_i35)
                {
                  JobDesc _elem36 = new JobDesc();
                  _elem36 = new JobDesc();
                  _elem36.Read(iprot);
                  this.job_desc.Add(_elem36);
                }
                iprot.ReadListEnd();
              }
              this.__isset.job_desc = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                this.task_desc = new List<TaskDesc>();
                TList _list37 = iprot.ReadListBegin();
                for( int _i38 = 0; _i38 < _list37.Count; ++_i38)
                {
                  TaskDesc _elem39 = new TaskDesc();
                  _elem39 = new TaskDesc();
                  _elem39.Read(iprot);
                  this.task_desc.Add(_elem39);
                }
                iprot.ReadListEnd();
              }
              this.__isset.task_desc = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              this.recovered_job_num = iprot.ReadI32();
              this.__isset.recovered_job_num = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AdminJobResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.job_id) {
        field.Name = "job_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.job_id);
        oprot.WriteFieldEnd();
      }
      if (this.job_desc != null && __isset.job_desc) {
        field.Name = "job_desc";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.job_desc.Count));
          foreach (JobDesc _iter40 in this.job_desc)
          {
            _iter40.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.task_desc != null && __isset.task_desc) {
        field.Name = "task_desc";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.task_desc.Count));
          foreach (TaskDesc _iter41 in this.task_desc)
          {
            _iter41.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.recovered_job_num) {
        field.Name = "recovered_job_num";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.recovered_job_num);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AdminJobResult(");
      sb.Append("job_id: ");
      sb.Append(this.job_id);
      sb.Append(",job_desc: ");
      sb.Append(this.job_desc);
      sb.Append(",task_desc: ");
      sb.Append(this.task_desc);
      sb.Append(",recovered_job_num: ");
      sb.Append(this.recovered_job_num);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
