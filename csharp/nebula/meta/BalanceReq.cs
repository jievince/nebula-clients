/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{

  [Serializable]
  public partial class BalanceReq : TBase
  {
    private int space_id;
    private long id;
    private List<nebula.HostAddr> host_del;
    private bool stop;

    public int Space_id
    {
      get
      {
        return space_id;
      }
      set
      {
        __isset.space_id = true;
        this.space_id = value;
      }
    }

    public long Id
    {
      get
      {
        return id;
      }
      set
      {
        __isset.id = true;
        this.id = value;
      }
    }

    public List<nebula.HostAddr> Host_del
    {
      get
      {
        return host_del;
      }
      set
      {
        __isset.host_del = true;
        this.host_del = value;
      }
    }

    public bool Stop
    {
      get
      {
        return stop;
      }
      set
      {
        __isset.stop = true;
        this.stop = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space_id;
      public bool id;
      public bool host_del;
      public bool stop;
    }

    public BalanceReq() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.space_id = iprot.ReadI32();
              this.__isset.space_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              this.id = iprot.ReadI64();
              this.__isset.id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                this.host_del = new List<nebula.HostAddr>();
                TList _list141 = iprot.ReadListBegin();
                for( int _i142 = 0; _i142 < _list141.Count; ++_i142)
                {
                  nebula.HostAddr _elem143 = new nebula.HostAddr();
                  _elem143 = new nebula.HostAddr();
                  _elem143.Read(iprot);
                  this.host_del.Add(_elem143);
                }
                iprot.ReadListEnd();
              }
              this.__isset.host_del = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              this.stop = iprot.ReadBool();
              this.__isset.stop = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BalanceReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.space_id) {
        field.Name = "space_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.space_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.id);
        oprot.WriteFieldEnd();
      }
      if (this.host_del != null && __isset.host_del) {
        field.Name = "host_del";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.host_del.Count));
          foreach (nebula.HostAddr _iter144 in this.host_del)
          {
            _iter144.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.stop) {
        field.Name = "stop";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.stop);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BalanceReq(");
      sb.Append("space_id: ");
      sb.Append(this.space_id);
      sb.Append(",id: ");
      sb.Append(this.id);
      sb.Append(",host_del: ");
      sb.Append(this.host_del);
      sb.Append(",stop: ");
      sb.Append(this.stop);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
