/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{

  [Serializable]
  public partial class EdgeItem : TBase
  {
    private int edge_type;
    private byte[] edge_name;
    private long version;
    private Schema schema;

    public int Edge_type
    {
      get
      {
        return edge_type;
      }
      set
      {
        __isset.edge_type = true;
        this.edge_type = value;
      }
    }

    public byte[] Edge_name
    {
      get
      {
        return edge_name;
      }
      set
      {
        __isset.edge_name = true;
        this.edge_name = value;
      }
    }

    public long Version
    {
      get
      {
        return version;
      }
      set
      {
        __isset.version = true;
        this.version = value;
      }
    }

    public Schema Schema
    {
      get
      {
        return schema;
      }
      set
      {
        __isset.schema = true;
        this.schema = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool edge_type;
      public bool edge_name;
      public bool version;
      public bool schema;
    }

    public EdgeItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.edge_type = iprot.ReadI32();
              this.__isset.edge_type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.edge_name = iprot.ReadBinary();
              this.__isset.edge_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.version = iprot.ReadI64();
              this.__isset.version = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              this.schema = new Schema();
              this.schema.Read(iprot);
              this.__isset.schema = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EdgeItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.edge_type) {
        field.Name = "edge_type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.edge_type);
        oprot.WriteFieldEnd();
      }
      if (this.edge_name != null && __isset.edge_name) {
        field.Name = "edge_name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.edge_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.version);
        oprot.WriteFieldEnd();
      }
      if (this.schema != null && __isset.schema) {
        field.Name = "schema";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        this.schema.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EdgeItem(");
      sb.Append("edge_type: ");
      sb.Append(this.edge_type);
      sb.Append(",edge_name: ");
      sb.Append(this.edge_name);
      sb.Append(",version: ");
      sb.Append(this.version);
      sb.Append(",schema: ");
      sb.Append(this.schema== null ? "<null>" : this.schema.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
