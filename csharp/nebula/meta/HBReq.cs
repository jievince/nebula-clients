/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{

  [Serializable]
  public partial class HBReq : TBase
  {
    private HostRole role;
    private nebula.HostAddr host;
    private long cluster_id;
    private Dictionary<int, List<int>> leader_partIds;
    private byte[] git_info_sha;

    public HostRole Role
    {
      get
      {
        return role;
      }
      set
      {
        __isset.role = true;
        this.role = value;
      }
    }

    public nebula.HostAddr Host
    {
      get
      {
        return host;
      }
      set
      {
        __isset.host = true;
        this.host = value;
      }
    }

    public long Cluster_id
    {
      get
      {
        return cluster_id;
      }
      set
      {
        __isset.cluster_id = true;
        this.cluster_id = value;
      }
    }

    public Dictionary<int, List<int>> Leader_partIds
    {
      get
      {
        return leader_partIds;
      }
      set
      {
        __isset.leader_partIds = true;
        this.leader_partIds = value;
      }
    }

    public byte[] Git_info_sha
    {
      get
      {
        return git_info_sha;
      }
      set
      {
        __isset.git_info_sha = true;
        this.git_info_sha = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool role;
      public bool host;
      public bool cluster_id;
      public bool leader_partIds;
      public bool git_info_sha;
    }

    public HBReq() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.role = (HostRole)iprot.ReadI32();
              this.__isset.role = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              this.host = new nebula.HostAddr();
              this.host.Read(iprot);
              this.__isset.host = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.cluster_id = iprot.ReadI64();
              this.__isset.cluster_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                this.leader_partIds = new Dictionary<int, List<int>>();
                TMap _map107 = iprot.ReadMapBegin();
                for( int _i108 = 0; _i108 < _map107.Count; ++_i108)
                {
                  int _key109;
                  List<int> _val110;
                  _key109 = iprot.ReadI32();
                  {
                    _val110 = new List<int>();
                    TList _list111 = iprot.ReadListBegin();
                    for( int _i112 = 0; _i112 < _list111.Count; ++_i112)
                    {
                      int _elem113 = 0;
                      _elem113 = iprot.ReadI32();
                      _val110.Add(_elem113);
                    }
                    iprot.ReadListEnd();
                  }
                  this.leader_partIds[_key109] = _val110;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.leader_partIds = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              this.git_info_sha = iprot.ReadBinary();
              this.__isset.git_info_sha = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HBReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.role) {
        field.Name = "role";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.role);
        oprot.WriteFieldEnd();
      }
      if (this.host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        this.host.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.cluster_id) {
        field.Name = "cluster_id";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.cluster_id);
        oprot.WriteFieldEnd();
      }
      if (this.leader_partIds != null && __isset.leader_partIds) {
        field.Name = "leader_partIds";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, this.leader_partIds.Count));
          foreach (int _iter114 in this.leader_partIds.Keys)
          {
            oprot.WriteI32(_iter114);
            {
              oprot.WriteListBegin(new TList(TType.I32, this.leader_partIds[_iter114].Count));
              foreach (int _iter115 in this.leader_partIds[_iter114])
              {
                oprot.WriteI32(_iter115);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.git_info_sha != null && __isset.git_info_sha) {
        field.Name = "git_info_sha";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.git_info_sha);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HBReq(");
      sb.Append("role: ");
      sb.Append(this.role);
      sb.Append(",host: ");
      sb.Append(this.host== null ? "<null>" : this.host.ToString());
      sb.Append(",cluster_id: ");
      sb.Append(this.cluster_id);
      sb.Append(",leader_partIds: ");
      sb.Append(this.leader_partIds);
      sb.Append(",git_info_sha: ");
      sb.Append(this.git_info_sha);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
