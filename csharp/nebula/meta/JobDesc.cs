/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{

  [Serializable]
  public partial class JobDesc : TBase
  {
    private int id;
    private AdminCmd cmd;
    private List<string> paras;
    private JobStatus status;
    private long start_time;
    private long stop_time;

    public int Id
    {
      get
      {
        return id;
      }
      set
      {
        __isset.id = true;
        this.id = value;
      }
    }

    public AdminCmd Cmd
    {
      get
      {
        return cmd;
      }
      set
      {
        __isset.cmd = true;
        this.cmd = value;
      }
    }

    public List<string> Paras
    {
      get
      {
        return paras;
      }
      set
      {
        __isset.paras = true;
        this.paras = value;
      }
    }

    public JobStatus Status
    {
      get
      {
        return status;
      }
      set
      {
        __isset.status = true;
        this.status = value;
      }
    }

    public long Start_time
    {
      get
      {
        return start_time;
      }
      set
      {
        __isset.start_time = true;
        this.start_time = value;
      }
    }

    public long Stop_time
    {
      get
      {
        return stop_time;
      }
      set
      {
        __isset.stop_time = true;
        this.stop_time = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool cmd;
      public bool paras;
      public bool status;
      public bool start_time;
      public bool stop_time;
    }

    public JobDesc() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.id = iprot.ReadI32();
              this.__isset.id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.cmd = (AdminCmd)iprot.ReadI32();
              this.__isset.cmd = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                this.paras = new List<string>();
                TList _list30 = iprot.ReadListBegin();
                for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                {
                  string _elem32 = null;
                  _elem32 = iprot.ReadString();
                  this.paras.Add(_elem32);
                }
                iprot.ReadListEnd();
              }
              this.__isset.paras = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              this.status = (JobStatus)iprot.ReadI32();
              this.__isset.status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              this.start_time = iprot.ReadI64();
              this.__isset.start_time = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              this.stop_time = iprot.ReadI64();
              this.__isset.stop_time = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("JobDesc");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.id);
        oprot.WriteFieldEnd();
      }
      if (__isset.cmd) {
        field.Name = "cmd";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.cmd);
        oprot.WriteFieldEnd();
      }
      if (this.paras != null && __isset.paras) {
        field.Name = "paras";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.paras.Count));
          foreach (string _iter33 in this.paras)
          {
            oprot.WriteString(_iter33);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.status);
        oprot.WriteFieldEnd();
      }
      if (__isset.start_time) {
        field.Name = "start_time";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.start_time);
        oprot.WriteFieldEnd();
      }
      if (__isset.stop_time) {
        field.Name = "stop_time";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.stop_time);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("JobDesc(");
      sb.Append("id: ");
      sb.Append(this.id);
      sb.Append(",cmd: ");
      sb.Append(this.cmd);
      sb.Append(",paras: ");
      sb.Append(this.paras);
      sb.Append(",status: ");
      sb.Append(this.status);
      sb.Append(",start_time: ");
      sb.Append(this.start_time);
      sb.Append(",stop_time: ");
      sb.Append(this.stop_time);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
