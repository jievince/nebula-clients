/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{
  public class MetaService {
    public interface Iface {
      ExecResp createSpace(CreateSpaceReq req);
      ExecResp dropSpace(DropSpaceReq req);
      GetSpaceResp getSpace(GetSpaceReq req);
      ListSpacesResp listSpaces(ListSpacesReq req);
      ExecResp createTag(CreateTagReq req);
      ExecResp alterTag(AlterTagReq req);
      ExecResp dropTag(DropTagReq req);
      GetTagResp getTag(GetTagReq req);
      ListTagsResp listTags(ListTagsReq req);
      ExecResp createEdge(CreateEdgeReq req);
      ExecResp alterEdge(AlterEdgeReq req);
      ExecResp dropEdge(DropEdgeReq req);
      GetEdgeResp getEdge(GetEdgeReq req);
      ListEdgesResp listEdges(ListEdgesReq req);
      ListHostsResp listHosts(ListHostsReq req);
      GetPartsAllocResp getPartsAlloc(GetPartsAllocReq req);
      ListPartsResp listParts(ListPartsReq req);
      ExecResp multiPut(MultiPutReq req);
      GetResp get(GetReq req);
      MultiGetResp multiGet(MultiGetReq req);
      ExecResp remove(RemoveReq req);
      ExecResp removeRange(RemoveRangeReq req);
      ScanResp scan(ScanReq req);
      ExecResp createTagIndex(CreateTagIndexReq req);
      ExecResp dropTagIndex(DropTagIndexReq req);
      GetTagIndexResp getTagIndex(GetTagIndexReq req);
      ListTagIndexesResp listTagIndexes(ListTagIndexesReq req);
      ExecResp rebuildTagIndex(RebuildIndexReq req);
      ListIndexStatusResp listTagIndexStatus(ListIndexStatusReq req);
      ExecResp createEdgeIndex(CreateEdgeIndexReq req);
      ExecResp dropEdgeIndex(DropEdgeIndexReq req);
      GetEdgeIndexResp getEdgeIndex(GetEdgeIndexReq req);
      ListEdgeIndexesResp listEdgeIndexes(ListEdgeIndexesReq req);
      ExecResp rebuildEdgeIndex(RebuildIndexReq req);
      ListIndexStatusResp listEdgeIndexStatus(ListIndexStatusReq req);
      ExecResp createUser(CreateUserReq req);
      ExecResp dropUser(DropUserReq req);
      ExecResp alterUser(AlterUserReq req);
      ExecResp grantRole(GrantRoleReq req);
      ExecResp revokeRole(RevokeRoleReq req);
      ListUsersResp listUsers(ListUsersReq req);
      ListRolesResp listRoles(ListRolesReq req);
      ListRolesResp getUserRoles(GetUserRolesReq req);
      ExecResp changePassword(ChangePasswordReq req);
      HBResp heartBeat(HBReq req);
      BalanceResp balance(BalanceReq req);
      ExecResp leaderBalance(LeaderBalanceReq req);
      ExecResp regConfig(RegConfigReq req);
      GetConfigResp getConfig(GetConfigReq req);
      ExecResp setConfig(SetConfigReq req);
      ListConfigsResp listConfigs(ListConfigsReq req);
      ExecResp createSnapshot(CreateSnapshotReq req);
      ExecResp dropSnapshot(DropSnapshotReq req);
      ListSnapshotsResp listSnapshots(ListSnapshotsReq req);
      AdminJobResp runAdminJob(AdminJobReq req);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public ExecResp createSpace(CreateSpaceReq req)
      {
        send_createSpace(req);
        return recv_createSpace();
      }

      public void send_createSpace(CreateSpaceReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("createSpace", TMessageType.Call, seqid_));
        createSpace_args args = new createSpace_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_createSpace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createSpace_result result = new createSpace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSpace failed: unknown result");
      }

      public ExecResp dropSpace(DropSpaceReq req)
      {
        send_dropSpace(req);
        return recv_dropSpace();
      }

      public void send_dropSpace(DropSpaceReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("dropSpace", TMessageType.Call, seqid_));
        dropSpace_args args = new dropSpace_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_dropSpace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        dropSpace_result result = new dropSpace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropSpace failed: unknown result");
      }

      public GetSpaceResp getSpace(GetSpaceReq req)
      {
        send_getSpace(req);
        return recv_getSpace();
      }

      public void send_getSpace(GetSpaceReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getSpace", TMessageType.Call, seqid_));
        getSpace_args args = new getSpace_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetSpaceResp recv_getSpace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSpace_result result = new getSpace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSpace failed: unknown result");
      }

      public ListSpacesResp listSpaces(ListSpacesReq req)
      {
        send_listSpaces(req);
        return recv_listSpaces();
      }

      public void send_listSpaces(ListSpacesReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listSpaces", TMessageType.Call, seqid_));
        listSpaces_args args = new listSpaces_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListSpacesResp recv_listSpaces()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listSpaces_result result = new listSpaces_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listSpaces failed: unknown result");
      }

      public ExecResp createTag(CreateTagReq req)
      {
        send_createTag(req);
        return recv_createTag();
      }

      public void send_createTag(CreateTagReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("createTag", TMessageType.Call, seqid_));
        createTag_args args = new createTag_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_createTag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createTag_result result = new createTag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTag failed: unknown result");
      }

      public ExecResp alterTag(AlterTagReq req)
      {
        send_alterTag(req);
        return recv_alterTag();
      }

      public void send_alterTag(AlterTagReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("alterTag", TMessageType.Call, seqid_));
        alterTag_args args = new alterTag_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_alterTag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        alterTag_result result = new alterTag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "alterTag failed: unknown result");
      }

      public ExecResp dropTag(DropTagReq req)
      {
        send_dropTag(req);
        return recv_dropTag();
      }

      public void send_dropTag(DropTagReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("dropTag", TMessageType.Call, seqid_));
        dropTag_args args = new dropTag_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_dropTag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        dropTag_result result = new dropTag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropTag failed: unknown result");
      }

      public GetTagResp getTag(GetTagReq req)
      {
        send_getTag(req);
        return recv_getTag();
      }

      public void send_getTag(GetTagReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getTag", TMessageType.Call, seqid_));
        getTag_args args = new getTag_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetTagResp recv_getTag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTag_result result = new getTag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTag failed: unknown result");
      }

      public ListTagsResp listTags(ListTagsReq req)
      {
        send_listTags(req);
        return recv_listTags();
      }

      public void send_listTags(ListTagsReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listTags", TMessageType.Call, seqid_));
        listTags_args args = new listTags_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListTagsResp recv_listTags()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listTags_result result = new listTags_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTags failed: unknown result");
      }

      public ExecResp createEdge(CreateEdgeReq req)
      {
        send_createEdge(req);
        return recv_createEdge();
      }

      public void send_createEdge(CreateEdgeReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("createEdge", TMessageType.Call, seqid_));
        createEdge_args args = new createEdge_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_createEdge()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createEdge_result result = new createEdge_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createEdge failed: unknown result");
      }

      public ExecResp alterEdge(AlterEdgeReq req)
      {
        send_alterEdge(req);
        return recv_alterEdge();
      }

      public void send_alterEdge(AlterEdgeReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("alterEdge", TMessageType.Call, seqid_));
        alterEdge_args args = new alterEdge_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_alterEdge()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        alterEdge_result result = new alterEdge_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "alterEdge failed: unknown result");
      }

      public ExecResp dropEdge(DropEdgeReq req)
      {
        send_dropEdge(req);
        return recv_dropEdge();
      }

      public void send_dropEdge(DropEdgeReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("dropEdge", TMessageType.Call, seqid_));
        dropEdge_args args = new dropEdge_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_dropEdge()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        dropEdge_result result = new dropEdge_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropEdge failed: unknown result");
      }

      public GetEdgeResp getEdge(GetEdgeReq req)
      {
        send_getEdge(req);
        return recv_getEdge();
      }

      public void send_getEdge(GetEdgeReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getEdge", TMessageType.Call, seqid_));
        getEdge_args args = new getEdge_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetEdgeResp recv_getEdge()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEdge_result result = new getEdge_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEdge failed: unknown result");
      }

      public ListEdgesResp listEdges(ListEdgesReq req)
      {
        send_listEdges(req);
        return recv_listEdges();
      }

      public void send_listEdges(ListEdgesReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listEdges", TMessageType.Call, seqid_));
        listEdges_args args = new listEdges_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListEdgesResp recv_listEdges()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listEdges_result result = new listEdges_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listEdges failed: unknown result");
      }

      public ListHostsResp listHosts(ListHostsReq req)
      {
        send_listHosts(req);
        return recv_listHosts();
      }

      public void send_listHosts(ListHostsReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listHosts", TMessageType.Call, seqid_));
        listHosts_args args = new listHosts_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListHostsResp recv_listHosts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listHosts_result result = new listHosts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listHosts failed: unknown result");
      }

      public GetPartsAllocResp getPartsAlloc(GetPartsAllocReq req)
      {
        send_getPartsAlloc(req);
        return recv_getPartsAlloc();
      }

      public void send_getPartsAlloc(GetPartsAllocReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getPartsAlloc", TMessageType.Call, seqid_));
        getPartsAlloc_args args = new getPartsAlloc_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetPartsAllocResp recv_getPartsAlloc()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPartsAlloc_result result = new getPartsAlloc_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPartsAlloc failed: unknown result");
      }

      public ListPartsResp listParts(ListPartsReq req)
      {
        send_listParts(req);
        return recv_listParts();
      }

      public void send_listParts(ListPartsReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listParts", TMessageType.Call, seqid_));
        listParts_args args = new listParts_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListPartsResp recv_listParts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listParts_result result = new listParts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listParts failed: unknown result");
      }

      public ExecResp multiPut(MultiPutReq req)
      {
        send_multiPut(req);
        return recv_multiPut();
      }

      public void send_multiPut(MultiPutReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("multiPut", TMessageType.Call, seqid_));
        multiPut_args args = new multiPut_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_multiPut()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        multiPut_result result = new multiPut_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "multiPut failed: unknown result");
      }

      public GetResp get(GetReq req)
      {
        send_get(req);
        return recv_get();
      }

      public void send_get(GetReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("get", TMessageType.Call, seqid_));
        get_args args = new get_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetResp recv_get()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_result result = new get_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get failed: unknown result");
      }

      public MultiGetResp multiGet(MultiGetReq req)
      {
        send_multiGet(req);
        return recv_multiGet();
      }

      public void send_multiGet(MultiGetReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("multiGet", TMessageType.Call, seqid_));
        multiGet_args args = new multiGet_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public MultiGetResp recv_multiGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        multiGet_result result = new multiGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "multiGet failed: unknown result");
      }

      public ExecResp remove(RemoveReq req)
      {
        send_remove(req);
        return recv_remove();
      }

      public void send_remove(RemoveReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("remove", TMessageType.Call, seqid_));
        remove_args args = new remove_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_remove()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        remove_result result = new remove_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "remove failed: unknown result");
      }

      public ExecResp removeRange(RemoveRangeReq req)
      {
        send_removeRange(req);
        return recv_removeRange();
      }

      public void send_removeRange(RemoveRangeReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("removeRange", TMessageType.Call, seqid_));
        removeRange_args args = new removeRange_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_removeRange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeRange_result result = new removeRange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeRange failed: unknown result");
      }

      public ScanResp scan(ScanReq req)
      {
        send_scan(req);
        return recv_scan();
      }

      public void send_scan(ScanReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("scan", TMessageType.Call, seqid_));
        scan_args args = new scan_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ScanResp recv_scan()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scan_result result = new scan_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan failed: unknown result");
      }

      public ExecResp createTagIndex(CreateTagIndexReq req)
      {
        send_createTagIndex(req);
        return recv_createTagIndex();
      }

      public void send_createTagIndex(CreateTagIndexReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("createTagIndex", TMessageType.Call, seqid_));
        createTagIndex_args args = new createTagIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_createTagIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createTagIndex_result result = new createTagIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTagIndex failed: unknown result");
      }

      public ExecResp dropTagIndex(DropTagIndexReq req)
      {
        send_dropTagIndex(req);
        return recv_dropTagIndex();
      }

      public void send_dropTagIndex(DropTagIndexReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("dropTagIndex", TMessageType.Call, seqid_));
        dropTagIndex_args args = new dropTagIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_dropTagIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        dropTagIndex_result result = new dropTagIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropTagIndex failed: unknown result");
      }

      public GetTagIndexResp getTagIndex(GetTagIndexReq req)
      {
        send_getTagIndex(req);
        return recv_getTagIndex();
      }

      public void send_getTagIndex(GetTagIndexReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getTagIndex", TMessageType.Call, seqid_));
        getTagIndex_args args = new getTagIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetTagIndexResp recv_getTagIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTagIndex_result result = new getTagIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTagIndex failed: unknown result");
      }

      public ListTagIndexesResp listTagIndexes(ListTagIndexesReq req)
      {
        send_listTagIndexes(req);
        return recv_listTagIndexes();
      }

      public void send_listTagIndexes(ListTagIndexesReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listTagIndexes", TMessageType.Call, seqid_));
        listTagIndexes_args args = new listTagIndexes_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListTagIndexesResp recv_listTagIndexes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listTagIndexes_result result = new listTagIndexes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTagIndexes failed: unknown result");
      }

      public ExecResp rebuildTagIndex(RebuildIndexReq req)
      {
        send_rebuildTagIndex(req);
        return recv_rebuildTagIndex();
      }

      public void send_rebuildTagIndex(RebuildIndexReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("rebuildTagIndex", TMessageType.Call, seqid_));
        rebuildTagIndex_args args = new rebuildTagIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_rebuildTagIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rebuildTagIndex_result result = new rebuildTagIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rebuildTagIndex failed: unknown result");
      }

      public ListIndexStatusResp listTagIndexStatus(ListIndexStatusReq req)
      {
        send_listTagIndexStatus(req);
        return recv_listTagIndexStatus();
      }

      public void send_listTagIndexStatus(ListIndexStatusReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listTagIndexStatus", TMessageType.Call, seqid_));
        listTagIndexStatus_args args = new listTagIndexStatus_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListIndexStatusResp recv_listTagIndexStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listTagIndexStatus_result result = new listTagIndexStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTagIndexStatus failed: unknown result");
      }

      public ExecResp createEdgeIndex(CreateEdgeIndexReq req)
      {
        send_createEdgeIndex(req);
        return recv_createEdgeIndex();
      }

      public void send_createEdgeIndex(CreateEdgeIndexReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("createEdgeIndex", TMessageType.Call, seqid_));
        createEdgeIndex_args args = new createEdgeIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_createEdgeIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createEdgeIndex_result result = new createEdgeIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createEdgeIndex failed: unknown result");
      }

      public ExecResp dropEdgeIndex(DropEdgeIndexReq req)
      {
        send_dropEdgeIndex(req);
        return recv_dropEdgeIndex();
      }

      public void send_dropEdgeIndex(DropEdgeIndexReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("dropEdgeIndex", TMessageType.Call, seqid_));
        dropEdgeIndex_args args = new dropEdgeIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_dropEdgeIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        dropEdgeIndex_result result = new dropEdgeIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropEdgeIndex failed: unknown result");
      }

      public GetEdgeIndexResp getEdgeIndex(GetEdgeIndexReq req)
      {
        send_getEdgeIndex(req);
        return recv_getEdgeIndex();
      }

      public void send_getEdgeIndex(GetEdgeIndexReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getEdgeIndex", TMessageType.Call, seqid_));
        getEdgeIndex_args args = new getEdgeIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetEdgeIndexResp recv_getEdgeIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEdgeIndex_result result = new getEdgeIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEdgeIndex failed: unknown result");
      }

      public ListEdgeIndexesResp listEdgeIndexes(ListEdgeIndexesReq req)
      {
        send_listEdgeIndexes(req);
        return recv_listEdgeIndexes();
      }

      public void send_listEdgeIndexes(ListEdgeIndexesReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listEdgeIndexes", TMessageType.Call, seqid_));
        listEdgeIndexes_args args = new listEdgeIndexes_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListEdgeIndexesResp recv_listEdgeIndexes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listEdgeIndexes_result result = new listEdgeIndexes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listEdgeIndexes failed: unknown result");
      }

      public ExecResp rebuildEdgeIndex(RebuildIndexReq req)
      {
        send_rebuildEdgeIndex(req);
        return recv_rebuildEdgeIndex();
      }

      public void send_rebuildEdgeIndex(RebuildIndexReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("rebuildEdgeIndex", TMessageType.Call, seqid_));
        rebuildEdgeIndex_args args = new rebuildEdgeIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_rebuildEdgeIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rebuildEdgeIndex_result result = new rebuildEdgeIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rebuildEdgeIndex failed: unknown result");
      }

      public ListIndexStatusResp listEdgeIndexStatus(ListIndexStatusReq req)
      {
        send_listEdgeIndexStatus(req);
        return recv_listEdgeIndexStatus();
      }

      public void send_listEdgeIndexStatus(ListIndexStatusReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listEdgeIndexStatus", TMessageType.Call, seqid_));
        listEdgeIndexStatus_args args = new listEdgeIndexStatus_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListIndexStatusResp recv_listEdgeIndexStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listEdgeIndexStatus_result result = new listEdgeIndexStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listEdgeIndexStatus failed: unknown result");
      }

      public ExecResp createUser(CreateUserReq req)
      {
        send_createUser(req);
        return recv_createUser();
      }

      public void send_createUser(CreateUserReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("createUser", TMessageType.Call, seqid_));
        createUser_args args = new createUser_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_createUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createUser_result result = new createUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createUser failed: unknown result");
      }

      public ExecResp dropUser(DropUserReq req)
      {
        send_dropUser(req);
        return recv_dropUser();
      }

      public void send_dropUser(DropUserReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("dropUser", TMessageType.Call, seqid_));
        dropUser_args args = new dropUser_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_dropUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        dropUser_result result = new dropUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropUser failed: unknown result");
      }

      public ExecResp alterUser(AlterUserReq req)
      {
        send_alterUser(req);
        return recv_alterUser();
      }

      public void send_alterUser(AlterUserReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("alterUser", TMessageType.Call, seqid_));
        alterUser_args args = new alterUser_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_alterUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        alterUser_result result = new alterUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "alterUser failed: unknown result");
      }

      public ExecResp grantRole(GrantRoleReq req)
      {
        send_grantRole(req);
        return recv_grantRole();
      }

      public void send_grantRole(GrantRoleReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("grantRole", TMessageType.Call, seqid_));
        grantRole_args args = new grantRole_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_grantRole()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        grantRole_result result = new grantRole_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "grantRole failed: unknown result");
      }

      public ExecResp revokeRole(RevokeRoleReq req)
      {
        send_revokeRole(req);
        return recv_revokeRole();
      }

      public void send_revokeRole(RevokeRoleReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("revokeRole", TMessageType.Call, seqid_));
        revokeRole_args args = new revokeRole_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_revokeRole()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        revokeRole_result result = new revokeRole_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "revokeRole failed: unknown result");
      }

      public ListUsersResp listUsers(ListUsersReq req)
      {
        send_listUsers(req);
        return recv_listUsers();
      }

      public void send_listUsers(ListUsersReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listUsers", TMessageType.Call, seqid_));
        listUsers_args args = new listUsers_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListUsersResp recv_listUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listUsers_result result = new listUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listUsers failed: unknown result");
      }

      public ListRolesResp listRoles(ListRolesReq req)
      {
        send_listRoles(req);
        return recv_listRoles();
      }

      public void send_listRoles(ListRolesReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listRoles", TMessageType.Call, seqid_));
        listRoles_args args = new listRoles_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListRolesResp recv_listRoles()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listRoles_result result = new listRoles_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listRoles failed: unknown result");
      }

      public ListRolesResp getUserRoles(GetUserRolesReq req)
      {
        send_getUserRoles(req);
        return recv_getUserRoles();
      }

      public void send_getUserRoles(GetUserRolesReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getUserRoles", TMessageType.Call, seqid_));
        getUserRoles_args args = new getUserRoles_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListRolesResp recv_getUserRoles()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserRoles_result result = new getUserRoles_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserRoles failed: unknown result");
      }

      public ExecResp changePassword(ChangePasswordReq req)
      {
        send_changePassword(req);
        return recv_changePassword();
      }

      public void send_changePassword(ChangePasswordReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("changePassword", TMessageType.Call, seqid_));
        changePassword_args args = new changePassword_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_changePassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        changePassword_result result = new changePassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changePassword failed: unknown result");
      }

      public HBResp heartBeat(HBReq req)
      {
        send_heartBeat(req);
        return recv_heartBeat();
      }

      public void send_heartBeat(HBReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("heartBeat", TMessageType.Call, seqid_));
        heartBeat_args args = new heartBeat_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public HBResp recv_heartBeat()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        heartBeat_result result = new heartBeat_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "heartBeat failed: unknown result");
      }

      public BalanceResp balance(BalanceReq req)
      {
        send_balance(req);
        return recv_balance();
      }

      public void send_balance(BalanceReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("balance", TMessageType.Call, seqid_));
        balance_args args = new balance_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public BalanceResp recv_balance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        balance_result result = new balance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "balance failed: unknown result");
      }

      public ExecResp leaderBalance(LeaderBalanceReq req)
      {
        send_leaderBalance(req);
        return recv_leaderBalance();
      }

      public void send_leaderBalance(LeaderBalanceReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("leaderBalance", TMessageType.Call, seqid_));
        leaderBalance_args args = new leaderBalance_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_leaderBalance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        leaderBalance_result result = new leaderBalance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "leaderBalance failed: unknown result");
      }

      public ExecResp regConfig(RegConfigReq req)
      {
        send_regConfig(req);
        return recv_regConfig();
      }

      public void send_regConfig(RegConfigReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("regConfig", TMessageType.Call, seqid_));
        regConfig_args args = new regConfig_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_regConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        regConfig_result result = new regConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "regConfig failed: unknown result");
      }

      public GetConfigResp getConfig(GetConfigReq req)
      {
        send_getConfig(req);
        return recv_getConfig();
      }

      public void send_getConfig(GetConfigReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getConfig", TMessageType.Call, seqid_));
        getConfig_args args = new getConfig_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetConfigResp recv_getConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getConfig_result result = new getConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getConfig failed: unknown result");
      }

      public ExecResp setConfig(SetConfigReq req)
      {
        send_setConfig(req);
        return recv_setConfig();
      }

      public void send_setConfig(SetConfigReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("setConfig", TMessageType.Call, seqid_));
        setConfig_args args = new setConfig_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_setConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setConfig_result result = new setConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setConfig failed: unknown result");
      }

      public ListConfigsResp listConfigs(ListConfigsReq req)
      {
        send_listConfigs(req);
        return recv_listConfigs();
      }

      public void send_listConfigs(ListConfigsReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listConfigs", TMessageType.Call, seqid_));
        listConfigs_args args = new listConfigs_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListConfigsResp recv_listConfigs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listConfigs_result result = new listConfigs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listConfigs failed: unknown result");
      }

      public ExecResp createSnapshot(CreateSnapshotReq req)
      {
        send_createSnapshot(req);
        return recv_createSnapshot();
      }

      public void send_createSnapshot(CreateSnapshotReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("createSnapshot", TMessageType.Call, seqid_));
        createSnapshot_args args = new createSnapshot_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_createSnapshot()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createSnapshot_result result = new createSnapshot_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSnapshot failed: unknown result");
      }

      public ExecResp dropSnapshot(DropSnapshotReq req)
      {
        send_dropSnapshot(req);
        return recv_dropSnapshot();
      }

      public void send_dropSnapshot(DropSnapshotReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("dropSnapshot", TMessageType.Call, seqid_));
        dropSnapshot_args args = new dropSnapshot_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResp recv_dropSnapshot()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        dropSnapshot_result result = new dropSnapshot_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropSnapshot failed: unknown result");
      }

      public ListSnapshotsResp listSnapshots(ListSnapshotsReq req)
      {
        send_listSnapshots(req);
        return recv_listSnapshots();
      }

      public void send_listSnapshots(ListSnapshotsReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("listSnapshots", TMessageType.Call, seqid_));
        listSnapshots_args args = new listSnapshots_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ListSnapshotsResp recv_listSnapshots()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listSnapshots_result result = new listSnapshots_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listSnapshots failed: unknown result");
      }

      public AdminJobResp runAdminJob(AdminJobReq req)
      {
        send_runAdminJob(req);
        return recv_runAdminJob();
      }

      public void send_runAdminJob(AdminJobReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("runAdminJob", TMessageType.Call, seqid_));
        runAdminJob_args args = new runAdminJob_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminJobResp recv_runAdminJob()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        runAdminJob_result result = new runAdminJob_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "runAdminJob failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["createSpace"] = createSpace_Process;
        processMap_["dropSpace"] = dropSpace_Process;
        processMap_["getSpace"] = getSpace_Process;
        processMap_["listSpaces"] = listSpaces_Process;
        processMap_["createTag"] = createTag_Process;
        processMap_["alterTag"] = alterTag_Process;
        processMap_["dropTag"] = dropTag_Process;
        processMap_["getTag"] = getTag_Process;
        processMap_["listTags"] = listTags_Process;
        processMap_["createEdge"] = createEdge_Process;
        processMap_["alterEdge"] = alterEdge_Process;
        processMap_["dropEdge"] = dropEdge_Process;
        processMap_["getEdge"] = getEdge_Process;
        processMap_["listEdges"] = listEdges_Process;
        processMap_["listHosts"] = listHosts_Process;
        processMap_["getPartsAlloc"] = getPartsAlloc_Process;
        processMap_["listParts"] = listParts_Process;
        processMap_["multiPut"] = multiPut_Process;
        processMap_["get"] = get_Process;
        processMap_["multiGet"] = multiGet_Process;
        processMap_["remove"] = remove_Process;
        processMap_["removeRange"] = removeRange_Process;
        processMap_["scan"] = scan_Process;
        processMap_["createTagIndex"] = createTagIndex_Process;
        processMap_["dropTagIndex"] = dropTagIndex_Process;
        processMap_["getTagIndex"] = getTagIndex_Process;
        processMap_["listTagIndexes"] = listTagIndexes_Process;
        processMap_["rebuildTagIndex"] = rebuildTagIndex_Process;
        processMap_["listTagIndexStatus"] = listTagIndexStatus_Process;
        processMap_["createEdgeIndex"] = createEdgeIndex_Process;
        processMap_["dropEdgeIndex"] = dropEdgeIndex_Process;
        processMap_["getEdgeIndex"] = getEdgeIndex_Process;
        processMap_["listEdgeIndexes"] = listEdgeIndexes_Process;
        processMap_["rebuildEdgeIndex"] = rebuildEdgeIndex_Process;
        processMap_["listEdgeIndexStatus"] = listEdgeIndexStatus_Process;
        processMap_["createUser"] = createUser_Process;
        processMap_["dropUser"] = dropUser_Process;
        processMap_["alterUser"] = alterUser_Process;
        processMap_["grantRole"] = grantRole_Process;
        processMap_["revokeRole"] = revokeRole_Process;
        processMap_["listUsers"] = listUsers_Process;
        processMap_["listRoles"] = listRoles_Process;
        processMap_["getUserRoles"] = getUserRoles_Process;
        processMap_["changePassword"] = changePassword_Process;
        processMap_["heartBeat"] = heartBeat_Process;
        processMap_["balance"] = balance_Process;
        processMap_["leaderBalance"] = leaderBalance_Process;
        processMap_["regConfig"] = regConfig_Process;
        processMap_["getConfig"] = getConfig_Process;
        processMap_["setConfig"] = setConfig_Process;
        processMap_["listConfigs"] = listConfigs_Process;
        processMap_["createSnapshot"] = createSnapshot_Process;
        processMap_["dropSnapshot"] = dropSnapshot_Process;
        processMap_["listSnapshots"] = listSnapshots_Process;
        processMap_["runAdminJob"] = runAdminJob_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void createSpace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createSpace_args args = new createSpace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createSpace_result result = new createSpace_result();
        result.Success = iface_.createSpace(args.Req);
        oprot.WriteMessageBegin(new TMessage("createSpace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void dropSpace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        dropSpace_args args = new dropSpace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        dropSpace_result result = new dropSpace_result();
        result.Success = iface_.dropSpace(args.Req);
        oprot.WriteMessageBegin(new TMessage("dropSpace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSpace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSpace_args args = new getSpace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSpace_result result = new getSpace_result();
        result.Success = iface_.getSpace(args.Req);
        oprot.WriteMessageBegin(new TMessage("getSpace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listSpaces_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listSpaces_args args = new listSpaces_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listSpaces_result result = new listSpaces_result();
        result.Success = iface_.listSpaces(args.Req);
        oprot.WriteMessageBegin(new TMessage("listSpaces", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createTag_args args = new createTag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createTag_result result = new createTag_result();
        result.Success = iface_.createTag(args.Req);
        oprot.WriteMessageBegin(new TMessage("createTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void alterTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        alterTag_args args = new alterTag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        alterTag_result result = new alterTag_result();
        result.Success = iface_.alterTag(args.Req);
        oprot.WriteMessageBegin(new TMessage("alterTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void dropTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        dropTag_args args = new dropTag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        dropTag_result result = new dropTag_result();
        result.Success = iface_.dropTag(args.Req);
        oprot.WriteMessageBegin(new TMessage("dropTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTag_args args = new getTag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTag_result result = new getTag_result();
        result.Success = iface_.getTag(args.Req);
        oprot.WriteMessageBegin(new TMessage("getTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listTags_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listTags_args args = new listTags_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listTags_result result = new listTags_result();
        result.Success = iface_.listTags(args.Req);
        oprot.WriteMessageBegin(new TMessage("listTags", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createEdge_args args = new createEdge_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createEdge_result result = new createEdge_result();
        result.Success = iface_.createEdge(args.Req);
        oprot.WriteMessageBegin(new TMessage("createEdge", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void alterEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        alterEdge_args args = new alterEdge_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        alterEdge_result result = new alterEdge_result();
        result.Success = iface_.alterEdge(args.Req);
        oprot.WriteMessageBegin(new TMessage("alterEdge", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void dropEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        dropEdge_args args = new dropEdge_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        dropEdge_result result = new dropEdge_result();
        result.Success = iface_.dropEdge(args.Req);
        oprot.WriteMessageBegin(new TMessage("dropEdge", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEdge_args args = new getEdge_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEdge_result result = new getEdge_result();
        result.Success = iface_.getEdge(args.Req);
        oprot.WriteMessageBegin(new TMessage("getEdge", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listEdges_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listEdges_args args = new listEdges_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listEdges_result result = new listEdges_result();
        result.Success = iface_.listEdges(args.Req);
        oprot.WriteMessageBegin(new TMessage("listEdges", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listHosts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listHosts_args args = new listHosts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listHosts_result result = new listHosts_result();
        result.Success = iface_.listHosts(args.Req);
        oprot.WriteMessageBegin(new TMessage("listHosts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPartsAlloc_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPartsAlloc_args args = new getPartsAlloc_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPartsAlloc_result result = new getPartsAlloc_result();
        result.Success = iface_.getPartsAlloc(args.Req);
        oprot.WriteMessageBegin(new TMessage("getPartsAlloc", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listParts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listParts_args args = new listParts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listParts_result result = new listParts_result();
        result.Success = iface_.listParts(args.Req);
        oprot.WriteMessageBegin(new TMessage("listParts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void multiPut_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        multiPut_args args = new multiPut_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        multiPut_result result = new multiPut_result();
        result.Success = iface_.multiPut(args.Req);
        oprot.WriteMessageBegin(new TMessage("multiPut", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_args args = new get_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_result result = new get_result();
        result.Success = iface_.get(args.Req);
        oprot.WriteMessageBegin(new TMessage("get", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void multiGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        multiGet_args args = new multiGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        multiGet_result result = new multiGet_result();
        result.Success = iface_.multiGet(args.Req);
        oprot.WriteMessageBegin(new TMessage("multiGet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void remove_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        remove_args args = new remove_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        remove_result result = new remove_result();
        result.Success = iface_.remove(args.Req);
        oprot.WriteMessageBegin(new TMessage("remove", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeRange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeRange_args args = new removeRange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeRange_result result = new removeRange_result();
        result.Success = iface_.removeRange(args.Req);
        oprot.WriteMessageBegin(new TMessage("removeRange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scan_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scan_args args = new scan_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scan_result result = new scan_result();
        result.Success = iface_.scan(args.Req);
        oprot.WriteMessageBegin(new TMessage("scan", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createTagIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createTagIndex_args args = new createTagIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createTagIndex_result result = new createTagIndex_result();
        result.Success = iface_.createTagIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("createTagIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void dropTagIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        dropTagIndex_args args = new dropTagIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        dropTagIndex_result result = new dropTagIndex_result();
        result.Success = iface_.dropTagIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("dropTagIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTagIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTagIndex_args args = new getTagIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTagIndex_result result = new getTagIndex_result();
        result.Success = iface_.getTagIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("getTagIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listTagIndexes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listTagIndexes_args args = new listTagIndexes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listTagIndexes_result result = new listTagIndexes_result();
        result.Success = iface_.listTagIndexes(args.Req);
        oprot.WriteMessageBegin(new TMessage("listTagIndexes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rebuildTagIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rebuildTagIndex_args args = new rebuildTagIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rebuildTagIndex_result result = new rebuildTagIndex_result();
        result.Success = iface_.rebuildTagIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("rebuildTagIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listTagIndexStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listTagIndexStatus_args args = new listTagIndexStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listTagIndexStatus_result result = new listTagIndexStatus_result();
        result.Success = iface_.listTagIndexStatus(args.Req);
        oprot.WriteMessageBegin(new TMessage("listTagIndexStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createEdgeIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createEdgeIndex_args args = new createEdgeIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createEdgeIndex_result result = new createEdgeIndex_result();
        result.Success = iface_.createEdgeIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("createEdgeIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void dropEdgeIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        dropEdgeIndex_args args = new dropEdgeIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        dropEdgeIndex_result result = new dropEdgeIndex_result();
        result.Success = iface_.dropEdgeIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("dropEdgeIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEdgeIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEdgeIndex_args args = new getEdgeIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEdgeIndex_result result = new getEdgeIndex_result();
        result.Success = iface_.getEdgeIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("getEdgeIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listEdgeIndexes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listEdgeIndexes_args args = new listEdgeIndexes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listEdgeIndexes_result result = new listEdgeIndexes_result();
        result.Success = iface_.listEdgeIndexes(args.Req);
        oprot.WriteMessageBegin(new TMessage("listEdgeIndexes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rebuildEdgeIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rebuildEdgeIndex_args args = new rebuildEdgeIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rebuildEdgeIndex_result result = new rebuildEdgeIndex_result();
        result.Success = iface_.rebuildEdgeIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("rebuildEdgeIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listEdgeIndexStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listEdgeIndexStatus_args args = new listEdgeIndexStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listEdgeIndexStatus_result result = new listEdgeIndexStatus_result();
        result.Success = iface_.listEdgeIndexStatus(args.Req);
        oprot.WriteMessageBegin(new TMessage("listEdgeIndexStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createUser_args args = new createUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createUser_result result = new createUser_result();
        result.Success = iface_.createUser(args.Req);
        oprot.WriteMessageBegin(new TMessage("createUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void dropUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        dropUser_args args = new dropUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        dropUser_result result = new dropUser_result();
        result.Success = iface_.dropUser(args.Req);
        oprot.WriteMessageBegin(new TMessage("dropUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void alterUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        alterUser_args args = new alterUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        alterUser_result result = new alterUser_result();
        result.Success = iface_.alterUser(args.Req);
        oprot.WriteMessageBegin(new TMessage("alterUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void grantRole_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        grantRole_args args = new grantRole_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        grantRole_result result = new grantRole_result();
        result.Success = iface_.grantRole(args.Req);
        oprot.WriteMessageBegin(new TMessage("grantRole", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void revokeRole_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        revokeRole_args args = new revokeRole_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        revokeRole_result result = new revokeRole_result();
        result.Success = iface_.revokeRole(args.Req);
        oprot.WriteMessageBegin(new TMessage("revokeRole", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listUsers_args args = new listUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listUsers_result result = new listUsers_result();
        result.Success = iface_.listUsers(args.Req);
        oprot.WriteMessageBegin(new TMessage("listUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listRoles_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listRoles_args args = new listRoles_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listRoles_result result = new listRoles_result();
        result.Success = iface_.listRoles(args.Req);
        oprot.WriteMessageBegin(new TMessage("listRoles", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserRoles_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserRoles_args args = new getUserRoles_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserRoles_result result = new getUserRoles_result();
        result.Success = iface_.getUserRoles(args.Req);
        oprot.WriteMessageBegin(new TMessage("getUserRoles", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void changePassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        changePassword_args args = new changePassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        changePassword_result result = new changePassword_result();
        result.Success = iface_.changePassword(args.Req);
        oprot.WriteMessageBegin(new TMessage("changePassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void heartBeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        heartBeat_args args = new heartBeat_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        heartBeat_result result = new heartBeat_result();
        result.Success = iface_.heartBeat(args.Req);
        oprot.WriteMessageBegin(new TMessage("heartBeat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void balance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        balance_args args = new balance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        balance_result result = new balance_result();
        result.Success = iface_.balance(args.Req);
        oprot.WriteMessageBegin(new TMessage("balance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void leaderBalance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        leaderBalance_args args = new leaderBalance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        leaderBalance_result result = new leaderBalance_result();
        result.Success = iface_.leaderBalance(args.Req);
        oprot.WriteMessageBegin(new TMessage("leaderBalance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void regConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        regConfig_args args = new regConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        regConfig_result result = new regConfig_result();
        result.Success = iface_.regConfig(args.Req);
        oprot.WriteMessageBegin(new TMessage("regConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getConfig_args args = new getConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getConfig_result result = new getConfig_result();
        result.Success = iface_.getConfig(args.Req);
        oprot.WriteMessageBegin(new TMessage("getConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setConfig_args args = new setConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setConfig_result result = new setConfig_result();
        result.Success = iface_.setConfig(args.Req);
        oprot.WriteMessageBegin(new TMessage("setConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listConfigs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listConfigs_args args = new listConfigs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listConfigs_result result = new listConfigs_result();
        result.Success = iface_.listConfigs(args.Req);
        oprot.WriteMessageBegin(new TMessage("listConfigs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createSnapshot_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createSnapshot_args args = new createSnapshot_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createSnapshot_result result = new createSnapshot_result();
        result.Success = iface_.createSnapshot(args.Req);
        oprot.WriteMessageBegin(new TMessage("createSnapshot", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void dropSnapshot_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        dropSnapshot_args args = new dropSnapshot_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        dropSnapshot_result result = new dropSnapshot_result();
        result.Success = iface_.dropSnapshot(args.Req);
        oprot.WriteMessageBegin(new TMessage("dropSnapshot", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listSnapshots_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listSnapshots_args args = new listSnapshots_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listSnapshots_result result = new listSnapshots_result();
        result.Success = iface_.listSnapshots(args.Req);
        oprot.WriteMessageBegin(new TMessage("listSnapshots", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void runAdminJob_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        runAdminJob_args args = new runAdminJob_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        runAdminJob_result result = new runAdminJob_result();
        result.Success = iface_.runAdminJob(args.Req);
        oprot.WriteMessageBegin(new TMessage("runAdminJob", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class createSpace_args : TBase
    {
      private CreateSpaceReq req;

      public CreateSpaceReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public createSpace_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CreateSpaceReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSpace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSpace_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createSpace_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public createSpace_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSpace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSpace_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropSpace_args : TBase
    {
      private DropSpaceReq req;

      public DropSpaceReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public dropSpace_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DropSpaceReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropSpace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropSpace_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropSpace_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public dropSpace_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropSpace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropSpace_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getSpace_args : TBase
    {
      private GetSpaceReq req;

      public GetSpaceReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getSpace_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetSpaceReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSpace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSpace_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getSpace_result : TBase
    {
      private GetSpaceResp success;

      public GetSpaceResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getSpace_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetSpaceResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSpace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSpace_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listSpaces_args : TBase
    {
      private ListSpacesReq req;

      public ListSpacesReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listSpaces_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListSpacesReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listSpaces_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listSpaces_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listSpaces_result : TBase
    {
      private ListSpacesResp success;

      public ListSpacesResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listSpaces_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListSpacesResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listSpaces_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listSpaces_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createTag_args : TBase
    {
      private CreateTagReq req;

      public CreateTagReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public createTag_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CreateTagReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createTag_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createTag_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public createTag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createTag_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alterTag_args : TBase
    {
      private AlterTagReq req;

      public AlterTagReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public alterTag_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AlterTagReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alterTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alterTag_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alterTag_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public alterTag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alterTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alterTag_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropTag_args : TBase
    {
      private DropTagReq req;

      public DropTagReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public dropTag_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DropTagReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropTag_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropTag_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public dropTag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropTag_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getTag_args : TBase
    {
      private GetTagReq req;

      public GetTagReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getTag_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetTagReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTag_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getTag_result : TBase
    {
      private GetTagResp success;

      public GetTagResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getTag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetTagResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTag_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTags_args : TBase
    {
      private ListTagsReq req;

      public ListTagsReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listTags_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListTagsReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTags_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTags_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTags_result : TBase
    {
      private ListTagsResp success;

      public ListTagsResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listTags_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListTagsResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTags_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTags_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createEdge_args : TBase
    {
      private CreateEdgeReq req;

      public CreateEdgeReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public createEdge_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CreateEdgeReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createEdge_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createEdge_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createEdge_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public createEdge_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createEdge_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createEdge_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alterEdge_args : TBase
    {
      private AlterEdgeReq req;

      public AlterEdgeReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public alterEdge_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AlterEdgeReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alterEdge_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alterEdge_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alterEdge_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public alterEdge_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alterEdge_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alterEdge_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropEdge_args : TBase
    {
      private DropEdgeReq req;

      public DropEdgeReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public dropEdge_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DropEdgeReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropEdge_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropEdge_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropEdge_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public dropEdge_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropEdge_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropEdge_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getEdge_args : TBase
    {
      private GetEdgeReq req;

      public GetEdgeReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getEdge_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetEdgeReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEdge_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEdge_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getEdge_result : TBase
    {
      private GetEdgeResp success;

      public GetEdgeResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getEdge_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetEdgeResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEdge_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEdge_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listEdges_args : TBase
    {
      private ListEdgesReq req;

      public ListEdgesReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listEdges_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListEdgesReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listEdges_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listEdges_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listEdges_result : TBase
    {
      private ListEdgesResp success;

      public ListEdgesResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listEdges_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListEdgesResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listEdges_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listEdges_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listHosts_args : TBase
    {
      private ListHostsReq req;

      public ListHostsReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listHosts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListHostsReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listHosts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listHosts_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listHosts_result : TBase
    {
      private ListHostsResp success;

      public ListHostsResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listHosts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListHostsResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listHosts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listHosts_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getPartsAlloc_args : TBase
    {
      private GetPartsAllocReq req;

      public GetPartsAllocReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getPartsAlloc_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetPartsAllocReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPartsAlloc_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPartsAlloc_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getPartsAlloc_result : TBase
    {
      private GetPartsAllocResp success;

      public GetPartsAllocResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getPartsAlloc_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetPartsAllocResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPartsAlloc_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPartsAlloc_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listParts_args : TBase
    {
      private ListPartsReq req;

      public ListPartsReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listParts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListPartsReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listParts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listParts_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listParts_result : TBase
    {
      private ListPartsResp success;

      public ListPartsResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listParts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListPartsResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listParts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listParts_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class multiPut_args : TBase
    {
      private MultiPutReq req;

      public MultiPutReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public multiPut_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new MultiPutReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("multiPut_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("multiPut_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class multiPut_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public multiPut_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("multiPut_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("multiPut_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_args : TBase
    {
      private GetReq req;

      public GetReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public get_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_result : TBase
    {
      private GetResp success;

      public GetResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public get_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class multiGet_args : TBase
    {
      private MultiGetReq req;

      public MultiGetReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public multiGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new MultiGetReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("multiGet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("multiGet_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class multiGet_result : TBase
    {
      private MultiGetResp success;

      public MultiGetResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public multiGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new MultiGetResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("multiGet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("multiGet_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class remove_args : TBase
    {
      private RemoveReq req;

      public RemoveReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public remove_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new RemoveReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("remove_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("remove_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class remove_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public remove_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("remove_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("remove_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class removeRange_args : TBase
    {
      private RemoveRangeReq req;

      public RemoveRangeReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public removeRange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new RemoveRangeReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeRange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeRange_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class removeRange_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public removeRange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeRange_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeRange_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scan_args : TBase
    {
      private ScanReq req;

      public ScanReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public scan_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ScanReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scan_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scan_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scan_result : TBase
    {
      private ScanResp success;

      public ScanResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public scan_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ScanResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scan_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scan_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createTagIndex_args : TBase
    {
      private CreateTagIndexReq req;

      public CreateTagIndexReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public createTagIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CreateTagIndexReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createTagIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createTagIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createTagIndex_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public createTagIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createTagIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createTagIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropTagIndex_args : TBase
    {
      private DropTagIndexReq req;

      public DropTagIndexReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public dropTagIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DropTagIndexReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropTagIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropTagIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropTagIndex_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public dropTagIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropTagIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropTagIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getTagIndex_args : TBase
    {
      private GetTagIndexReq req;

      public GetTagIndexReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getTagIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetTagIndexReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTagIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTagIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getTagIndex_result : TBase
    {
      private GetTagIndexResp success;

      public GetTagIndexResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getTagIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetTagIndexResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTagIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTagIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTagIndexes_args : TBase
    {
      private ListTagIndexesReq req;

      public ListTagIndexesReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listTagIndexes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListTagIndexesReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTagIndexes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTagIndexes_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTagIndexes_result : TBase
    {
      private ListTagIndexesResp success;

      public ListTagIndexesResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listTagIndexes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListTagIndexesResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTagIndexes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTagIndexes_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rebuildTagIndex_args : TBase
    {
      private RebuildIndexReq req;

      public RebuildIndexReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public rebuildTagIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new RebuildIndexReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebuildTagIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebuildTagIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rebuildTagIndex_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public rebuildTagIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebuildTagIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebuildTagIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTagIndexStatus_args : TBase
    {
      private ListIndexStatusReq req;

      public ListIndexStatusReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listTagIndexStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListIndexStatusReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTagIndexStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTagIndexStatus_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listTagIndexStatus_result : TBase
    {
      private ListIndexStatusResp success;

      public ListIndexStatusResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listTagIndexStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListIndexStatusResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTagIndexStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTagIndexStatus_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createEdgeIndex_args : TBase
    {
      private CreateEdgeIndexReq req;

      public CreateEdgeIndexReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public createEdgeIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CreateEdgeIndexReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createEdgeIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createEdgeIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createEdgeIndex_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public createEdgeIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createEdgeIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createEdgeIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropEdgeIndex_args : TBase
    {
      private DropEdgeIndexReq req;

      public DropEdgeIndexReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public dropEdgeIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DropEdgeIndexReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropEdgeIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropEdgeIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropEdgeIndex_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public dropEdgeIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropEdgeIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropEdgeIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getEdgeIndex_args : TBase
    {
      private GetEdgeIndexReq req;

      public GetEdgeIndexReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getEdgeIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetEdgeIndexReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEdgeIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEdgeIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getEdgeIndex_result : TBase
    {
      private GetEdgeIndexResp success;

      public GetEdgeIndexResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getEdgeIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetEdgeIndexResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEdgeIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEdgeIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listEdgeIndexes_args : TBase
    {
      private ListEdgeIndexesReq req;

      public ListEdgeIndexesReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listEdgeIndexes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListEdgeIndexesReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listEdgeIndexes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listEdgeIndexes_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listEdgeIndexes_result : TBase
    {
      private ListEdgeIndexesResp success;

      public ListEdgeIndexesResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listEdgeIndexes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListEdgeIndexesResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listEdgeIndexes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listEdgeIndexes_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rebuildEdgeIndex_args : TBase
    {
      private RebuildIndexReq req;

      public RebuildIndexReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public rebuildEdgeIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new RebuildIndexReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebuildEdgeIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebuildEdgeIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rebuildEdgeIndex_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public rebuildEdgeIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebuildEdgeIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebuildEdgeIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listEdgeIndexStatus_args : TBase
    {
      private ListIndexStatusReq req;

      public ListIndexStatusReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listEdgeIndexStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListIndexStatusReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listEdgeIndexStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listEdgeIndexStatus_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listEdgeIndexStatus_result : TBase
    {
      private ListIndexStatusResp success;

      public ListIndexStatusResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listEdgeIndexStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListIndexStatusResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listEdgeIndexStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listEdgeIndexStatus_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createUser_args : TBase
    {
      private CreateUserReq req;

      public CreateUserReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public createUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CreateUserReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createUser_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createUser_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public createUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createUser_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropUser_args : TBase
    {
      private DropUserReq req;

      public DropUserReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public dropUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DropUserReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropUser_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropUser_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public dropUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropUser_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alterUser_args : TBase
    {
      private AlterUserReq req;

      public AlterUserReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public alterUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AlterUserReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alterUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alterUser_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alterUser_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public alterUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alterUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alterUser_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class grantRole_args : TBase
    {
      private GrantRoleReq req;

      public GrantRoleReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public grantRole_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GrantRoleReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("grantRole_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("grantRole_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class grantRole_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public grantRole_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("grantRole_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("grantRole_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class revokeRole_args : TBase
    {
      private RevokeRoleReq req;

      public RevokeRoleReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public revokeRole_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new RevokeRoleReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("revokeRole_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("revokeRole_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class revokeRole_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public revokeRole_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("revokeRole_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("revokeRole_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listUsers_args : TBase
    {
      private ListUsersReq req;

      public ListUsersReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListUsersReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listUsers_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listUsers_result : TBase
    {
      private ListUsersResp success;

      public ListUsersResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListUsersResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listUsers_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listRoles_args : TBase
    {
      private ListRolesReq req;

      public ListRolesReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listRoles_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListRolesReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listRoles_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listRoles_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listRoles_result : TBase
    {
      private ListRolesResp success;

      public ListRolesResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listRoles_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListRolesResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listRoles_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listRoles_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getUserRoles_args : TBase
    {
      private GetUserRolesReq req;

      public GetUserRolesReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getUserRoles_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetUserRolesReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserRoles_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserRoles_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getUserRoles_result : TBase
    {
      private ListRolesResp success;

      public ListRolesResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getUserRoles_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListRolesResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserRoles_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserRoles_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class changePassword_args : TBase
    {
      private ChangePasswordReq req;

      public ChangePasswordReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public changePassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ChangePasswordReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changePassword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changePassword_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class changePassword_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public changePassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changePassword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changePassword_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class heartBeat_args : TBase
    {
      private HBReq req;

      public HBReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public heartBeat_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new HBReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("heartBeat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("heartBeat_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class heartBeat_result : TBase
    {
      private HBResp success;

      public HBResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public heartBeat_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new HBResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("heartBeat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("heartBeat_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class balance_args : TBase
    {
      private BalanceReq req;

      public BalanceReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public balance_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new BalanceReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("balance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("balance_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class balance_result : TBase
    {
      private BalanceResp success;

      public BalanceResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public balance_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new BalanceResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("balance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("balance_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class leaderBalance_args : TBase
    {
      private LeaderBalanceReq req;

      public LeaderBalanceReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public leaderBalance_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new LeaderBalanceReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leaderBalance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("leaderBalance_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class leaderBalance_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public leaderBalance_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leaderBalance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("leaderBalance_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class regConfig_args : TBase
    {
      private RegConfigReq req;

      public RegConfigReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public regConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new RegConfigReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("regConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("regConfig_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class regConfig_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public regConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("regConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("regConfig_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getConfig_args : TBase
    {
      private GetConfigReq req;

      public GetConfigReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetConfigReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getConfig_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getConfig_result : TBase
    {
      private GetConfigResp success;

      public GetConfigResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetConfigResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getConfig_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class setConfig_args : TBase
    {
      private SetConfigReq req;

      public SetConfigReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public setConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new SetConfigReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setConfig_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class setConfig_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public setConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setConfig_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listConfigs_args : TBase
    {
      private ListConfigsReq req;

      public ListConfigsReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listConfigs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListConfigsReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listConfigs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listConfigs_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listConfigs_result : TBase
    {
      private ListConfigsResp success;

      public ListConfigsResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listConfigs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListConfigsResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listConfigs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listConfigs_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createSnapshot_args : TBase
    {
      private CreateSnapshotReq req;

      public CreateSnapshotReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public createSnapshot_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CreateSnapshotReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSnapshot_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSnapshot_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createSnapshot_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public createSnapshot_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSnapshot_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSnapshot_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropSnapshot_args : TBase
    {
      private DropSnapshotReq req;

      public DropSnapshotReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public dropSnapshot_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DropSnapshotReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropSnapshot_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropSnapshot_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropSnapshot_result : TBase
    {
      private ExecResp success;

      public ExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public dropSnapshot_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropSnapshot_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropSnapshot_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listSnapshots_args : TBase
    {
      private ListSnapshotsReq req;

      public ListSnapshotsReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public listSnapshots_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ListSnapshotsReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listSnapshots_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listSnapshots_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class listSnapshots_result : TBase
    {
      private ListSnapshotsResp success;

      public ListSnapshotsResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public listSnapshots_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ListSnapshotsResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listSnapshots_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listSnapshots_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class runAdminJob_args : TBase
    {
      private AdminJobReq req;

      public AdminJobReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public runAdminJob_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AdminJobReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("runAdminJob_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("runAdminJob_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class runAdminJob_result : TBase
    {
      private AdminJobResp success;

      public AdminJobResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public runAdminJob_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminJobResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("runAdminJob_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("runAdminJob_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
