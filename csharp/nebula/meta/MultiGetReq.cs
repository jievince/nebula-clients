/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{

  [Serializable]
  public partial class MultiGetReq : TBase
  {
    private byte[] segment;
    private List<byte[]> keys;

    public byte[] Segment
    {
      get
      {
        return segment;
      }
      set
      {
        __isset.segment = true;
        this.segment = value;
      }
    }

    public List<byte[]> Keys
    {
      get
      {
        return keys;
      }
      set
      {
        __isset.keys = true;
        this.keys = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool segment;
      public bool keys;
    }

    public MultiGetReq() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.segment = iprot.ReadBinary();
              this.__isset.segment = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                this.keys = new List<byte[]>();
                TList _list95 = iprot.ReadListBegin();
                for( int _i96 = 0; _i96 < _list95.Count; ++_i96)
                {
                  byte[] _elem97 = null;
                  _elem97 = iprot.ReadBinary();
                  this.keys.Add(_elem97);
                }
                iprot.ReadListEnd();
              }
              this.__isset.keys = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MultiGetReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.segment != null && __isset.segment) {
        field.Name = "segment";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.segment);
        oprot.WriteFieldEnd();
      }
      if (this.keys != null && __isset.keys) {
        field.Name = "keys";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.keys.Count));
          foreach (byte[] _iter98 in this.keys)
          {
            oprot.WriteBinary(_iter98);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MultiGetReq(");
      sb.Append("segment: ");
      sb.Append(this.segment);
      sb.Append(",keys: ");
      sb.Append(this.keys);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
