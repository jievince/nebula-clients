/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{

  [Serializable]
  public partial class MultiPutReq : TBase
  {
    private byte[] segment;
    private List<nebula.KeyValue> pairs;

    public byte[] Segment
    {
      get
      {
        return segment;
      }
      set
      {
        __isset.segment = true;
        this.segment = value;
      }
    }

    public List<nebula.KeyValue> Pairs
    {
      get
      {
        return pairs;
      }
      set
      {
        __isset.pairs = true;
        this.pairs = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool segment;
      public bool pairs;
    }

    public MultiPutReq() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.segment = iprot.ReadBinary();
              this.__isset.segment = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                this.pairs = new List<nebula.KeyValue>();
                TList _list91 = iprot.ReadListBegin();
                for( int _i92 = 0; _i92 < _list91.Count; ++_i92)
                {
                  nebula.KeyValue _elem93 = new nebula.KeyValue();
                  _elem93 = new nebula.KeyValue();
                  _elem93.Read(iprot);
                  this.pairs.Add(_elem93);
                }
                iprot.ReadListEnd();
              }
              this.__isset.pairs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MultiPutReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.segment != null && __isset.segment) {
        field.Name = "segment";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.segment);
        oprot.WriteFieldEnd();
      }
      if (this.pairs != null && __isset.pairs) {
        field.Name = "pairs";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.pairs.Count));
          foreach (nebula.KeyValue _iter94 in this.pairs)
          {
            _iter94.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MultiPutReq(");
      sb.Append("segment: ");
      sb.Append(this.segment);
      sb.Append(",pairs: ");
      sb.Append(this.pairs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
