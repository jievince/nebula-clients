/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{

  [Serializable]
  public partial class SchemaProp : TBase
  {
    private long ttl_duration;
    private byte[] ttl_col;

    public long Ttl_duration
    {
      get
      {
        return ttl_duration;
      }
      set
      {
        __isset.ttl_duration = true;
        this.ttl_duration = value;
      }
    }

    public byte[] Ttl_col
    {
      get
      {
        return ttl_col;
      }
      set
      {
        __isset.ttl_col = true;
        this.ttl_col = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool ttl_duration;
      public bool ttl_col;
    }

    public SchemaProp() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              this.ttl_duration = iprot.ReadI64();
              this.__isset.ttl_duration = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.ttl_col = iprot.ReadBinary();
              this.__isset.ttl_col = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SchemaProp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.ttl_duration) {
        field.Name = "ttl_duration";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.ttl_duration);
        oprot.WriteFieldEnd();
      }
      if (this.ttl_col != null && __isset.ttl_col) {
        field.Name = "ttl_col";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.ttl_col);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SchemaProp(");
      sb.Append("ttl_duration: ");
      sb.Append(this.ttl_duration);
      sb.Append(",ttl_col: ");
      sb.Append(this.ttl_col);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
