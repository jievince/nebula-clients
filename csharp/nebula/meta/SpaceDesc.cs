/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.meta
{

  [Serializable]
  public partial class SpaceDesc : TBase
  {
    private byte[] space_name;
    private int partition_num;
    private int replica_factor;
    private byte[] charset_name;
    private byte[] collate_name;
    private ColumnTypeDef vid_type;

    public byte[] Space_name
    {
      get
      {
        return space_name;
      }
      set
      {
        __isset.space_name = true;
        this.space_name = value;
      }
    }

    public int Partition_num
    {
      get
      {
        return partition_num;
      }
      set
      {
        __isset.partition_num = true;
        this.partition_num = value;
      }
    }

    public int Replica_factor
    {
      get
      {
        return replica_factor;
      }
      set
      {
        __isset.replica_factor = true;
        this.replica_factor = value;
      }
    }

    public byte[] Charset_name
    {
      get
      {
        return charset_name;
      }
      set
      {
        __isset.charset_name = true;
        this.charset_name = value;
      }
    }

    public byte[] Collate_name
    {
      get
      {
        return collate_name;
      }
      set
      {
        __isset.collate_name = true;
        this.collate_name = value;
      }
    }

    public ColumnTypeDef Vid_type
    {
      get
      {
        return vid_type;
      }
      set
      {
        __isset.vid_type = true;
        this.vid_type = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space_name;
      public bool partition_num;
      public bool replica_factor;
      public bool charset_name;
      public bool collate_name;
      public bool vid_type;
    }

    public SpaceDesc() {
      this.partition_num = 0;
      this.replica_factor = 0;
      this.vid_type = new ColumnTypeDef();
      this.vid_type.type = (PropertyType)7;
      this.vid_type.type_length = 8;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.space_name = iprot.ReadBinary();
              this.__isset.space_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.partition_num = iprot.ReadI32();
              this.__isset.partition_num = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              this.replica_factor = iprot.ReadI32();
              this.__isset.replica_factor = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              this.charset_name = iprot.ReadBinary();
              this.__isset.charset_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              this.collate_name = iprot.ReadBinary();
              this.__isset.collate_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              this.vid_type = new ColumnTypeDef();
              this.vid_type.Read(iprot);
              this.__isset.vid_type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SpaceDesc");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.space_name != null && __isset.space_name) {
        field.Name = "space_name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.space_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.partition_num) {
        field.Name = "partition_num";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.partition_num);
        oprot.WriteFieldEnd();
      }
      if (__isset.replica_factor) {
        field.Name = "replica_factor";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.replica_factor);
        oprot.WriteFieldEnd();
      }
      if (this.charset_name != null && __isset.charset_name) {
        field.Name = "charset_name";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.charset_name);
        oprot.WriteFieldEnd();
      }
      if (this.collate_name != null && __isset.collate_name) {
        field.Name = "collate_name";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.collate_name);
        oprot.WriteFieldEnd();
      }
      if (this.vid_type != null && __isset.vid_type) {
        field.Name = "vid_type";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        this.vid_type.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SpaceDesc(");
      sb.Append("space_name: ");
      sb.Append(this.space_name);
      sb.Append(",partition_num: ");
      sb.Append(this.partition_num);
      sb.Append(",replica_factor: ");
      sb.Append(this.replica_factor);
      sb.Append(",charset_name: ");
      sb.Append(this.charset_name);
      sb.Append(",collate_name: ");
      sb.Append(this.collate_name);
      sb.Append(",vid_type: ");
      sb.Append(this.vid_type== null ? "<null>" : this.vid_type.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
