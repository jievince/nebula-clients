/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.raftex
{

  [Serializable]
  public partial class AppendLogRequest : TBase
  {
    private int space;
    private int part;
    private long current_term;
    private long last_log_id;
    private long committed_log_id;
    private string leader_addr;
    private int leader_port;
    private long last_log_term_sent;
    private long last_log_id_sent;
    private long log_term;
    private List<LogEntry> log_str_list;
    private bool sending_snapshot;

    public int Space
    {
      get
      {
        return space;
      }
      set
      {
        __isset.space = true;
        this.space = value;
      }
    }

    public int Part
    {
      get
      {
        return part;
      }
      set
      {
        __isset.part = true;
        this.part = value;
      }
    }

    public long Current_term
    {
      get
      {
        return current_term;
      }
      set
      {
        __isset.current_term = true;
        this.current_term = value;
      }
    }

    public long Last_log_id
    {
      get
      {
        return last_log_id;
      }
      set
      {
        __isset.last_log_id = true;
        this.last_log_id = value;
      }
    }

    public long Committed_log_id
    {
      get
      {
        return committed_log_id;
      }
      set
      {
        __isset.committed_log_id = true;
        this.committed_log_id = value;
      }
    }

    public string Leader_addr
    {
      get
      {
        return leader_addr;
      }
      set
      {
        __isset.leader_addr = true;
        this.leader_addr = value;
      }
    }

    public int Leader_port
    {
      get
      {
        return leader_port;
      }
      set
      {
        __isset.leader_port = true;
        this.leader_port = value;
      }
    }

    public long Last_log_term_sent
    {
      get
      {
        return last_log_term_sent;
      }
      set
      {
        __isset.last_log_term_sent = true;
        this.last_log_term_sent = value;
      }
    }

    public long Last_log_id_sent
    {
      get
      {
        return last_log_id_sent;
      }
      set
      {
        __isset.last_log_id_sent = true;
        this.last_log_id_sent = value;
      }
    }

    public long Log_term
    {
      get
      {
        return log_term;
      }
      set
      {
        __isset.log_term = true;
        this.log_term = value;
      }
    }

    public List<LogEntry> Log_str_list
    {
      get
      {
        return log_str_list;
      }
      set
      {
        __isset.log_str_list = true;
        this.log_str_list = value;
      }
    }

    public bool Sending_snapshot
    {
      get
      {
        return sending_snapshot;
      }
      set
      {
        __isset.sending_snapshot = true;
        this.sending_snapshot = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space;
      public bool part;
      public bool current_term;
      public bool last_log_id;
      public bool committed_log_id;
      public bool leader_addr;
      public bool leader_port;
      public bool last_log_term_sent;
      public bool last_log_id_sent;
      public bool log_term;
      public bool log_str_list;
      public bool sending_snapshot;
    }

    public AppendLogRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.space = iprot.ReadI32();
              this.__isset.space = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.part = iprot.ReadI32();
              this.__isset.part = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.current_term = iprot.ReadI64();
              this.__isset.current_term = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              this.last_log_id = iprot.ReadI64();
              this.__isset.last_log_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              this.committed_log_id = iprot.ReadI64();
              this.__isset.committed_log_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              this.leader_addr = iprot.ReadString();
              this.__isset.leader_addr = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              this.leader_port = iprot.ReadI32();
              this.__isset.leader_port = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              this.last_log_term_sent = iprot.ReadI64();
              this.__isset.last_log_term_sent = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              this.last_log_id_sent = iprot.ReadI64();
              this.__isset.last_log_id_sent = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              this.log_term = iprot.ReadI64();
              this.__isset.log_term = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                this.log_str_list = new List<LogEntry>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  LogEntry _elem2 = new LogEntry();
                  _elem2 = new LogEntry();
                  _elem2.Read(iprot);
                  this.log_str_list.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
              this.__isset.log_str_list = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Bool) {
              this.sending_snapshot = iprot.ReadBool();
              this.__isset.sending_snapshot = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AppendLogRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.space) {
        field.Name = "space";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.space);
        oprot.WriteFieldEnd();
      }
      if (__isset.part) {
        field.Name = "part";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.part);
        oprot.WriteFieldEnd();
      }
      if (__isset.current_term) {
        field.Name = "current_term";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.current_term);
        oprot.WriteFieldEnd();
      }
      if (__isset.last_log_id) {
        field.Name = "last_log_id";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.last_log_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.committed_log_id) {
        field.Name = "committed_log_id";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.committed_log_id);
        oprot.WriteFieldEnd();
      }
      if (this.leader_addr != null && __isset.leader_addr) {
        field.Name = "leader_addr";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.leader_addr);
        oprot.WriteFieldEnd();
      }
      if (__isset.leader_port) {
        field.Name = "leader_port";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.leader_port);
        oprot.WriteFieldEnd();
      }
      if (__isset.last_log_term_sent) {
        field.Name = "last_log_term_sent";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.last_log_term_sent);
        oprot.WriteFieldEnd();
      }
      if (__isset.last_log_id_sent) {
        field.Name = "last_log_id_sent";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.last_log_id_sent);
        oprot.WriteFieldEnd();
      }
      if (__isset.log_term) {
        field.Name = "log_term";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.log_term);
        oprot.WriteFieldEnd();
      }
      if (this.log_str_list != null && __isset.log_str_list) {
        field.Name = "log_str_list";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.log_str_list.Count));
          foreach (LogEntry _iter3 in this.log_str_list)
          {
            _iter3.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.sending_snapshot) {
        field.Name = "sending_snapshot";
        field.Type = TType.Bool;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.sending_snapshot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AppendLogRequest(");
      sb.Append("space: ");
      sb.Append(this.space);
      sb.Append(",part: ");
      sb.Append(this.part);
      sb.Append(",current_term: ");
      sb.Append(this.current_term);
      sb.Append(",last_log_id: ");
      sb.Append(this.last_log_id);
      sb.Append(",committed_log_id: ");
      sb.Append(this.committed_log_id);
      sb.Append(",leader_addr: ");
      sb.Append(this.leader_addr);
      sb.Append(",leader_port: ");
      sb.Append(this.leader_port);
      sb.Append(",last_log_term_sent: ");
      sb.Append(this.last_log_term_sent);
      sb.Append(",last_log_id_sent: ");
      sb.Append(this.last_log_id_sent);
      sb.Append(",log_term: ");
      sb.Append(this.log_term);
      sb.Append(",log_str_list: ");
      sb.Append(this.log_str_list);
      sb.Append(",sending_snapshot: ");
      sb.Append(this.sending_snapshot);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
