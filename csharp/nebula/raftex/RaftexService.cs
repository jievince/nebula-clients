/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.raftex
{
  public class RaftexService {
    public interface Iface {
      AskForVoteResponse askForVote(AskForVoteRequest req);
      AppendLogResponse appendLog(AppendLogRequest req);
      SendSnapshotResponse sendSnapshot(SendSnapshotRequest req);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public AskForVoteResponse askForVote(AskForVoteRequest req)
      {
        send_askForVote(req);
        return recv_askForVote();
      }

      public void send_askForVote(AskForVoteRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("askForVote", TMessageType.Call, seqid_));
        askForVote_args args = new askForVote_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AskForVoteResponse recv_askForVote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        askForVote_result result = new askForVote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "askForVote failed: unknown result");
      }

      public AppendLogResponse appendLog(AppendLogRequest req)
      {
        send_appendLog(req);
        return recv_appendLog();
      }

      public void send_appendLog(AppendLogRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("appendLog", TMessageType.Call, seqid_));
        appendLog_args args = new appendLog_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AppendLogResponse recv_appendLog()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        appendLog_result result = new appendLog_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "appendLog failed: unknown result");
      }

      public SendSnapshotResponse sendSnapshot(SendSnapshotRequest req)
      {
        send_sendSnapshot(req);
        return recv_sendSnapshot();
      }

      public void send_sendSnapshot(SendSnapshotRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("sendSnapshot", TMessageType.Call, seqid_));
        sendSnapshot_args args = new sendSnapshot_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public SendSnapshotResponse recv_sendSnapshot()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendSnapshot_result result = new sendSnapshot_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendSnapshot failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["askForVote"] = askForVote_Process;
        processMap_["appendLog"] = appendLog_Process;
        processMap_["sendSnapshot"] = sendSnapshot_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void askForVote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        askForVote_args args = new askForVote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        askForVote_result result = new askForVote_result();
        result.Success = iface_.askForVote(args.Req);
        oprot.WriteMessageBegin(new TMessage("askForVote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void appendLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        appendLog_args args = new appendLog_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        appendLog_result result = new appendLog_result();
        result.Success = iface_.appendLog(args.Req);
        oprot.WriteMessageBegin(new TMessage("appendLog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendSnapshot_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendSnapshot_args args = new sendSnapshot_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendSnapshot_result result = new sendSnapshot_result();
        result.Success = iface_.sendSnapshot(args.Req);
        oprot.WriteMessageBegin(new TMessage("sendSnapshot", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class askForVote_args : TBase
    {
      private AskForVoteRequest req;

      public AskForVoteRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public askForVote_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AskForVoteRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("askForVote_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("askForVote_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class askForVote_result : TBase
    {
      private AskForVoteResponse success;

      public AskForVoteResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public askForVote_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AskForVoteResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("askForVote_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("askForVote_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class appendLog_args : TBase
    {
      private AppendLogRequest req;

      public AppendLogRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public appendLog_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AppendLogRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("appendLog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("appendLog_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class appendLog_result : TBase
    {
      private AppendLogResponse success;

      public AppendLogResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public appendLog_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AppendLogResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("appendLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("appendLog_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class sendSnapshot_args : TBase
    {
      private SendSnapshotRequest req;

      public SendSnapshotRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public sendSnapshot_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new SendSnapshotRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendSnapshot_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendSnapshot_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class sendSnapshot_result : TBase
    {
      private SendSnapshotResponse success;

      public SendSnapshotResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public sendSnapshot_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new SendSnapshotResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendSnapshot_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendSnapshot_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
