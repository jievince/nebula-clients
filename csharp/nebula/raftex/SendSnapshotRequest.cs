/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.raftex
{

  [Serializable]
  public partial class SendSnapshotRequest : TBase
  {
    private int space;
    private int part;
    private long term;
    private long committed_log_id;
    private long committed_log_term;
    private string leader_addr;
    private int leader_port;
    private List<byte[]> rows;
    private long total_size;
    private long total_count;
    private bool done;

    public int Space
    {
      get
      {
        return space;
      }
      set
      {
        __isset.space = true;
        this.space = value;
      }
    }

    public int Part
    {
      get
      {
        return part;
      }
      set
      {
        __isset.part = true;
        this.part = value;
      }
    }

    public long Term
    {
      get
      {
        return term;
      }
      set
      {
        __isset.term = true;
        this.term = value;
      }
    }

    public long Committed_log_id
    {
      get
      {
        return committed_log_id;
      }
      set
      {
        __isset.committed_log_id = true;
        this.committed_log_id = value;
      }
    }

    public long Committed_log_term
    {
      get
      {
        return committed_log_term;
      }
      set
      {
        __isset.committed_log_term = true;
        this.committed_log_term = value;
      }
    }

    public string Leader_addr
    {
      get
      {
        return leader_addr;
      }
      set
      {
        __isset.leader_addr = true;
        this.leader_addr = value;
      }
    }

    public int Leader_port
    {
      get
      {
        return leader_port;
      }
      set
      {
        __isset.leader_port = true;
        this.leader_port = value;
      }
    }

    public List<byte[]> Rows
    {
      get
      {
        return rows;
      }
      set
      {
        __isset.rows = true;
        this.rows = value;
      }
    }

    public long Total_size
    {
      get
      {
        return total_size;
      }
      set
      {
        __isset.total_size = true;
        this.total_size = value;
      }
    }

    public long Total_count
    {
      get
      {
        return total_count;
      }
      set
      {
        __isset.total_count = true;
        this.total_count = value;
      }
    }

    public bool Done
    {
      get
      {
        return done;
      }
      set
      {
        __isset.done = true;
        this.done = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space;
      public bool part;
      public bool term;
      public bool committed_log_id;
      public bool committed_log_term;
      public bool leader_addr;
      public bool leader_port;
      public bool rows;
      public bool total_size;
      public bool total_count;
      public bool done;
    }

    public SendSnapshotRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.space = iprot.ReadI32();
              this.__isset.space = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.part = iprot.ReadI32();
              this.__isset.part = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.term = iprot.ReadI64();
              this.__isset.term = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              this.committed_log_id = iprot.ReadI64();
              this.__isset.committed_log_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              this.committed_log_term = iprot.ReadI64();
              this.__isset.committed_log_term = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              this.leader_addr = iprot.ReadString();
              this.__isset.leader_addr = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              this.leader_port = iprot.ReadI32();
              this.__isset.leader_port = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                this.rows = new List<byte[]>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  byte[] _elem6 = null;
                  _elem6 = iprot.ReadBinary();
                  this.rows.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
              this.__isset.rows = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              this.total_size = iprot.ReadI64();
              this.__isset.total_size = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              this.total_count = iprot.ReadI64();
              this.__isset.total_count = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              this.done = iprot.ReadBool();
              this.__isset.done = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SendSnapshotRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.space) {
        field.Name = "space";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.space);
        oprot.WriteFieldEnd();
      }
      if (__isset.part) {
        field.Name = "part";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.part);
        oprot.WriteFieldEnd();
      }
      if (__isset.term) {
        field.Name = "term";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.term);
        oprot.WriteFieldEnd();
      }
      if (__isset.committed_log_id) {
        field.Name = "committed_log_id";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.committed_log_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.committed_log_term) {
        field.Name = "committed_log_term";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.committed_log_term);
        oprot.WriteFieldEnd();
      }
      if (this.leader_addr != null && __isset.leader_addr) {
        field.Name = "leader_addr";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.leader_addr);
        oprot.WriteFieldEnd();
      }
      if (__isset.leader_port) {
        field.Name = "leader_port";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.leader_port);
        oprot.WriteFieldEnd();
      }
      if (this.rows != null && __isset.rows) {
        field.Name = "rows";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.rows.Count));
          foreach (byte[] _iter7 in this.rows)
          {
            oprot.WriteBinary(_iter7);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.total_size) {
        field.Name = "total_size";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.total_size);
        oprot.WriteFieldEnd();
      }
      if (__isset.total_count) {
        field.Name = "total_count";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.total_count);
        oprot.WriteFieldEnd();
      }
      if (__isset.done) {
        field.Name = "done";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.done);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SendSnapshotRequest(");
      sb.Append("space: ");
      sb.Append(this.space);
      sb.Append(",part: ");
      sb.Append(this.part);
      sb.Append(",term: ");
      sb.Append(this.term);
      sb.Append(",committed_log_id: ");
      sb.Append(this.committed_log_id);
      sb.Append(",committed_log_term: ");
      sb.Append(this.committed_log_term);
      sb.Append(",leader_addr: ");
      sb.Append(this.leader_addr);
      sb.Append(",leader_port: ");
      sb.Append(this.leader_port);
      sb.Append(",rows: ");
      sb.Append(this.rows);
      sb.Append(",total_size: ");
      sb.Append(this.total_size);
      sb.Append(",total_count: ");
      sb.Append(this.total_count);
      sb.Append(",done: ");
      sb.Append(this.done);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
