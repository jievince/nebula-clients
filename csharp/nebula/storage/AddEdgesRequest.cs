/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class AddEdgesRequest : TBase
  {
    private int space_id;
    private Dictionary<int, List<NewEdge>> parts;
    private List<byte[]> prop_names;
    private bool overwritable;

    public int Space_id
    {
      get
      {
        return space_id;
      }
      set
      {
        __isset.space_id = true;
        this.space_id = value;
      }
    }

    public Dictionary<int, List<NewEdge>> Parts
    {
      get
      {
        return parts;
      }
      set
      {
        __isset.parts = true;
        this.parts = value;
      }
    }

    public List<byte[]> Prop_names
    {
      get
      {
        return prop_names;
      }
      set
      {
        __isset.prop_names = true;
        this.prop_names = value;
      }
    }

    public bool Overwritable
    {
      get
      {
        return overwritable;
      }
      set
      {
        __isset.overwritable = true;
        this.overwritable = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space_id;
      public bool parts;
      public bool prop_names;
      public bool overwritable;
    }

    public AddEdgesRequest() {
      this.overwritable = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.space_id = iprot.ReadI32();
              this.__isset.space_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                this.parts = new Dictionary<int, List<NewEdge>>();
                TMap _map108 = iprot.ReadMapBegin();
                for( int _i109 = 0; _i109 < _map108.Count; ++_i109)
                {
                  int _key110;
                  List<NewEdge> _val111;
                  _key110 = iprot.ReadI32();
                  {
                    _val111 = new List<NewEdge>();
                    TList _list112 = iprot.ReadListBegin();
                    for( int _i113 = 0; _i113 < _list112.Count; ++_i113)
                    {
                      NewEdge _elem114 = new NewEdge();
                      _elem114 = new NewEdge();
                      _elem114.Read(iprot);
                      _val111.Add(_elem114);
                    }
                    iprot.ReadListEnd();
                  }
                  this.parts[_key110] = _val111;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.parts = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                this.prop_names = new List<byte[]>();
                TList _list115 = iprot.ReadListBegin();
                for( int _i116 = 0; _i116 < _list115.Count; ++_i116)
                {
                  byte[] _elem117 = null;
                  _elem117 = iprot.ReadBinary();
                  this.prop_names.Add(_elem117);
                }
                iprot.ReadListEnd();
              }
              this.__isset.prop_names = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              this.overwritable = iprot.ReadBool();
              this.__isset.overwritable = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AddEdgesRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.space_id) {
        field.Name = "space_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.space_id);
        oprot.WriteFieldEnd();
      }
      if (this.parts != null && __isset.parts) {
        field.Name = "parts";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, this.parts.Count));
          foreach (int _iter118 in this.parts.Keys)
          {
            oprot.WriteI32(_iter118);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.parts[_iter118].Count));
              foreach (NewEdge _iter119 in this.parts[_iter118])
              {
                _iter119.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.prop_names != null && __isset.prop_names) {
        field.Name = "prop_names";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.prop_names.Count));
          foreach (byte[] _iter120 in this.prop_names)
          {
            oprot.WriteBinary(_iter120);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.overwritable) {
        field.Name = "overwritable";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.overwritable);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AddEdgesRequest(");
      sb.Append("space_id: ");
      sb.Append(this.space_id);
      sb.Append(",parts: ");
      sb.Append(this.parts);
      sb.Append(",prop_names: ");
      sb.Append(this.prop_names);
      sb.Append(",overwritable: ");
      sb.Append(this.overwritable);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
