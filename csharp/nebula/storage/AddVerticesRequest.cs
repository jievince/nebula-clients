/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class AddVerticesRequest : TBase
  {
    private int space_id;
    private Dictionary<int, List<NewVertex>> parts;
    private Dictionary<int, List<byte[]>> prop_names;
    private bool overwritable;

    public int Space_id
    {
      get
      {
        return space_id;
      }
      set
      {
        __isset.space_id = true;
        this.space_id = value;
      }
    }

    public Dictionary<int, List<NewVertex>> Parts
    {
      get
      {
        return parts;
      }
      set
      {
        __isset.parts = true;
        this.parts = value;
      }
    }

    public Dictionary<int, List<byte[]>> Prop_names
    {
      get
      {
        return prop_names;
      }
      set
      {
        __isset.prop_names = true;
        this.prop_names = value;
      }
    }

    public bool Overwritable
    {
      get
      {
        return overwritable;
      }
      set
      {
        __isset.overwritable = true;
        this.overwritable = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space_id;
      public bool parts;
      public bool prop_names;
      public bool overwritable;
    }

    public AddVerticesRequest() {
      this.overwritable = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.space_id = iprot.ReadI32();
              this.__isset.space_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                this.parts = new Dictionary<int, List<NewVertex>>();
                TMap _map90 = iprot.ReadMapBegin();
                for( int _i91 = 0; _i91 < _map90.Count; ++_i91)
                {
                  int _key92;
                  List<NewVertex> _val93;
                  _key92 = iprot.ReadI32();
                  {
                    _val93 = new List<NewVertex>();
                    TList _list94 = iprot.ReadListBegin();
                    for( int _i95 = 0; _i95 < _list94.Count; ++_i95)
                    {
                      NewVertex _elem96 = new NewVertex();
                      _elem96 = new NewVertex();
                      _elem96.Read(iprot);
                      _val93.Add(_elem96);
                    }
                    iprot.ReadListEnd();
                  }
                  this.parts[_key92] = _val93;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.parts = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                this.prop_names = new Dictionary<int, List<byte[]>>();
                TMap _map97 = iprot.ReadMapBegin();
                for( int _i98 = 0; _i98 < _map97.Count; ++_i98)
                {
                  int _key99;
                  List<byte[]> _val100;
                  _key99 = iprot.ReadI32();
                  {
                    _val100 = new List<byte[]>();
                    TList _list101 = iprot.ReadListBegin();
                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)
                    {
                      byte[] _elem103 = null;
                      _elem103 = iprot.ReadBinary();
                      _val100.Add(_elem103);
                    }
                    iprot.ReadListEnd();
                  }
                  this.prop_names[_key99] = _val100;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.prop_names = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              this.overwritable = iprot.ReadBool();
              this.__isset.overwritable = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AddVerticesRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.space_id) {
        field.Name = "space_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.space_id);
        oprot.WriteFieldEnd();
      }
      if (this.parts != null && __isset.parts) {
        field.Name = "parts";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, this.parts.Count));
          foreach (int _iter104 in this.parts.Keys)
          {
            oprot.WriteI32(_iter104);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.parts[_iter104].Count));
              foreach (NewVertex _iter105 in this.parts[_iter104])
              {
                _iter105.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.prop_names != null && __isset.prop_names) {
        field.Name = "prop_names";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, this.prop_names.Count));
          foreach (int _iter106 in this.prop_names.Keys)
          {
            oprot.WriteI32(_iter106);
            {
              oprot.WriteListBegin(new TList(TType.String, this.prop_names[_iter106].Count));
              foreach (byte[] _iter107 in this.prop_names[_iter106])
              {
                oprot.WriteBinary(_iter107);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.overwritable) {
        field.Name = "overwritable";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.overwritable);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AddVerticesRequest(");
      sb.Append("space_id: ");
      sb.Append(this.space_id);
      sb.Append(",parts: ");
      sb.Append(this.parts);
      sb.Append(",prop_names: ");
      sb.Append(this.prop_names);
      sb.Append(",overwritable: ");
      sb.Append(this.overwritable);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
