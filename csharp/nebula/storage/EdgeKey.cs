/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class EdgeKey : TBase
  {
    private nebula.Value src;
    private int edge_type;
    private long ranking;
    private nebula.Value dst;

    public nebula.Value Src
    {
      get
      {
        return src;
      }
      set
      {
        __isset.src = true;
        this.src = value;
      }
    }

    public int Edge_type
    {
      get
      {
        return edge_type;
      }
      set
      {
        __isset.edge_type = true;
        this.edge_type = value;
      }
    }

    public long Ranking
    {
      get
      {
        return ranking;
      }
      set
      {
        __isset.ranking = true;
        this.ranking = value;
      }
    }

    public nebula.Value Dst
    {
      get
      {
        return dst;
      }
      set
      {
        __isset.dst = true;
        this.dst = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool src;
      public bool edge_type;
      public bool ranking;
      public bool dst;
    }

    public EdgeKey() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              this.src = new nebula.Value();
              this.src.Read(iprot);
              this.__isset.src = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.edge_type = iprot.ReadI32();
              this.__isset.edge_type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.ranking = iprot.ReadI64();
              this.__isset.ranking = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              this.dst = new nebula.Value();
              this.dst.Read(iprot);
              this.__isset.dst = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EdgeKey");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.src != null && __isset.src) {
        field.Name = "src";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        this.src.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.edge_type) {
        field.Name = "edge_type";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.edge_type);
        oprot.WriteFieldEnd();
      }
      if (__isset.ranking) {
        field.Name = "ranking";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.ranking);
        oprot.WriteFieldEnd();
      }
      if (this.dst != null && __isset.dst) {
        field.Name = "dst";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        this.dst.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EdgeKey(");
      sb.Append("src: ");
      sb.Append(this.src== null ? "<null>" : this.src.ToString());
      sb.Append(",edge_type: ");
      sb.Append(this.edge_type);
      sb.Append(",ranking: ");
      sb.Append(this.ranking);
      sb.Append(",dst: ");
      sb.Append(this.dst== null ? "<null>" : this.dst.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
