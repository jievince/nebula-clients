/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class GetLeaderPartsResp : TBase
  {
    private ResponseCommon result;
    private Dictionary<int, List<int>> leader_parts;

    public ResponseCommon Result
    {
      get
      {
        return result;
      }
      set
      {
        __isset.result = true;
        this.result = value;
      }
    }

    public Dictionary<int, List<int>> Leader_parts
    {
      get
      {
        return leader_parts;
      }
      set
      {
        __isset.leader_parts = true;
        this.leader_parts = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool result;
      public bool leader_parts;
    }

    public GetLeaderPartsResp() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              this.result = new ResponseCommon();
              this.result.Read(iprot);
              this.__isset.result = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                this.leader_parts = new Dictionary<int, List<int>>();
                TMap _map191 = iprot.ReadMapBegin();
                for( int _i192 = 0; _i192 < _map191.Count; ++_i192)
                {
                  int _key193;
                  List<int> _val194;
                  _key193 = iprot.ReadI32();
                  {
                    _val194 = new List<int>();
                    TList _list195 = iprot.ReadListBegin();
                    for( int _i196 = 0; _i196 < _list195.Count; ++_i196)
                    {
                      int _elem197 = 0;
                      _elem197 = iprot.ReadI32();
                      _val194.Add(_elem197);
                    }
                    iprot.ReadListEnd();
                  }
                  this.leader_parts[_key193] = _val194;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.leader_parts = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetLeaderPartsResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.result != null && __isset.result) {
        field.Name = "result";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        this.result.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.leader_parts != null && __isset.leader_parts) {
        field.Name = "leader_parts";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, this.leader_parts.Count));
          foreach (int _iter198 in this.leader_parts.Keys)
          {
            oprot.WriteI32(_iter198);
            {
              oprot.WriteListBegin(new TList(TType.I32, this.leader_parts[_iter198].Count));
              foreach (int _iter199 in this.leader_parts[_iter198])
              {
                oprot.WriteI32(_iter199);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetLeaderPartsResp(");
      sb.Append("result: ");
      sb.Append(this.result== null ? "<null>" : this.result.ToString());
      sb.Append(",leader_parts: ");
      sb.Append(this.leader_parts);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
