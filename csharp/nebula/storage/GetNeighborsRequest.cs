/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class GetNeighborsRequest : TBase
  {
    private int space_id;
    private List<byte[]> column_names;
    private Dictionary<int, List<nebula.Row>> parts;
    private TraverseSpec traverse_spec;

    public int Space_id
    {
      get
      {
        return space_id;
      }
      set
      {
        __isset.space_id = true;
        this.space_id = value;
      }
    }

    public List<byte[]> Column_names
    {
      get
      {
        return column_names;
      }
      set
      {
        __isset.column_names = true;
        this.column_names = value;
      }
    }

    public Dictionary<int, List<nebula.Row>> Parts
    {
      get
      {
        return parts;
      }
      set
      {
        __isset.parts = true;
        this.parts = value;
      }
    }

    public TraverseSpec Traverse_spec
    {
      get
      {
        return traverse_spec;
      }
      set
      {
        __isset.traverse_spec = true;
        this.traverse_spec = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space_id;
      public bool column_names;
      public bool parts;
      public bool traverse_spec;
    }

    public GetNeighborsRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.space_id = iprot.ReadI32();
              this.__isset.space_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                this.column_names = new List<byte[]>();
                TList _list36 = iprot.ReadListBegin();
                for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  byte[] _elem38 = null;
                  _elem38 = iprot.ReadBinary();
                  this.column_names.Add(_elem38);
                }
                iprot.ReadListEnd();
              }
              this.__isset.column_names = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                this.parts = new Dictionary<int, List<nebula.Row>>();
                TMap _map39 = iprot.ReadMapBegin();
                for( int _i40 = 0; _i40 < _map39.Count; ++_i40)
                {
                  int _key41;
                  List<nebula.Row> _val42;
                  _key41 = iprot.ReadI32();
                  {
                    _val42 = new List<nebula.Row>();
                    TList _list43 = iprot.ReadListBegin();
                    for( int _i44 = 0; _i44 < _list43.Count; ++_i44)
                    {
                      nebula.Row _elem45 = new nebula.Row();
                      _elem45 = new nebula.Row();
                      _elem45.Read(iprot);
                      _val42.Add(_elem45);
                    }
                    iprot.ReadListEnd();
                  }
                  this.parts[_key41] = _val42;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.parts = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              this.traverse_spec = new TraverseSpec();
              this.traverse_spec.Read(iprot);
              this.__isset.traverse_spec = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetNeighborsRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.space_id) {
        field.Name = "space_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.space_id);
        oprot.WriteFieldEnd();
      }
      if (this.column_names != null && __isset.column_names) {
        field.Name = "column_names";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.column_names.Count));
          foreach (byte[] _iter46 in this.column_names)
          {
            oprot.WriteBinary(_iter46);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.parts != null && __isset.parts) {
        field.Name = "parts";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, this.parts.Count));
          foreach (int _iter47 in this.parts.Keys)
          {
            oprot.WriteI32(_iter47);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.parts[_iter47].Count));
              foreach (nebula.Row _iter48 in this.parts[_iter47])
              {
                _iter48.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.traverse_spec != null && __isset.traverse_spec) {
        field.Name = "traverse_spec";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        this.traverse_spec.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetNeighborsRequest(");
      sb.Append("space_id: ");
      sb.Append(this.space_id);
      sb.Append(",column_names: ");
      sb.Append(this.column_names);
      sb.Append(",parts: ");
      sb.Append(this.parts);
      sb.Append(",traverse_spec: ");
      sb.Append(this.traverse_spec== null ? "<null>" : this.traverse_spec.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
