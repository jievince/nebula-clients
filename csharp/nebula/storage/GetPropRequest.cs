/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class GetPropRequest : TBase
  {
    private int space_id;
    private List<byte[]> column_names;
    private Dictionary<int, List<nebula.Row>> parts;
    private List<VertexProp> vertex_props;
    private List<EdgeProp> edge_props;
    private List<Expr> expressions;
    private bool dedup;
    private List<OrderBy> order_by;
    private long limit;
    private byte[] filter;

    public int Space_id
    {
      get
      {
        return space_id;
      }
      set
      {
        __isset.space_id = true;
        this.space_id = value;
      }
    }

    public List<byte[]> Column_names
    {
      get
      {
        return column_names;
      }
      set
      {
        __isset.column_names = true;
        this.column_names = value;
      }
    }

    public Dictionary<int, List<nebula.Row>> Parts
    {
      get
      {
        return parts;
      }
      set
      {
        __isset.parts = true;
        this.parts = value;
      }
    }

    public List<VertexProp> Vertex_props
    {
      get
      {
        return vertex_props;
      }
      set
      {
        __isset.vertex_props = true;
        this.vertex_props = value;
      }
    }

    public List<EdgeProp> Edge_props
    {
      get
      {
        return edge_props;
      }
      set
      {
        __isset.edge_props = true;
        this.edge_props = value;
      }
    }

    public List<Expr> Expressions
    {
      get
      {
        return expressions;
      }
      set
      {
        __isset.expressions = true;
        this.expressions = value;
      }
    }

    public bool Dedup
    {
      get
      {
        return dedup;
      }
      set
      {
        __isset.dedup = true;
        this.dedup = value;
      }
    }

    public List<OrderBy> Order_by
    {
      get
      {
        return order_by;
      }
      set
      {
        __isset.order_by = true;
        this.order_by = value;
      }
    }

    public long Limit
    {
      get
      {
        return limit;
      }
      set
      {
        __isset.limit = true;
        this.limit = value;
      }
    }

    public byte[] Filter
    {
      get
      {
        return filter;
      }
      set
      {
        __isset.filter = true;
        this.filter = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space_id;
      public bool column_names;
      public bool parts;
      public bool vertex_props;
      public bool edge_props;
      public bool expressions;
      public bool dedup;
      public bool order_by;
      public bool limit;
      public bool filter;
    }

    public GetPropRequest() {
      this.dedup = false;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.space_id = iprot.ReadI32();
              this.__isset.space_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                this.column_names = new List<byte[]>();
                TList _list49 = iprot.ReadListBegin();
                for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                {
                  byte[] _elem51 = null;
                  _elem51 = iprot.ReadBinary();
                  this.column_names.Add(_elem51);
                }
                iprot.ReadListEnd();
              }
              this.__isset.column_names = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                this.parts = new Dictionary<int, List<nebula.Row>>();
                TMap _map52 = iprot.ReadMapBegin();
                for( int _i53 = 0; _i53 < _map52.Count; ++_i53)
                {
                  int _key54;
                  List<nebula.Row> _val55;
                  _key54 = iprot.ReadI32();
                  {
                    _val55 = new List<nebula.Row>();
                    TList _list56 = iprot.ReadListBegin();
                    for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                    {
                      nebula.Row _elem58 = new nebula.Row();
                      _elem58 = new nebula.Row();
                      _elem58.Read(iprot);
                      _val55.Add(_elem58);
                    }
                    iprot.ReadListEnd();
                  }
                  this.parts[_key54] = _val55;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.parts = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                this.vertex_props = new List<VertexProp>();
                TList _list59 = iprot.ReadListBegin();
                for( int _i60 = 0; _i60 < _list59.Count; ++_i60)
                {
                  VertexProp _elem61 = new VertexProp();
                  _elem61 = new VertexProp();
                  _elem61.Read(iprot);
                  this.vertex_props.Add(_elem61);
                }
                iprot.ReadListEnd();
              }
              this.__isset.vertex_props = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                this.edge_props = new List<EdgeProp>();
                TList _list62 = iprot.ReadListBegin();
                for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                {
                  EdgeProp _elem64 = new EdgeProp();
                  _elem64 = new EdgeProp();
                  _elem64.Read(iprot);
                  this.edge_props.Add(_elem64);
                }
                iprot.ReadListEnd();
              }
              this.__isset.edge_props = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                this.expressions = new List<Expr>();
                TList _list65 = iprot.ReadListBegin();
                for( int _i66 = 0; _i66 < _list65.Count; ++_i66)
                {
                  Expr _elem67 = new Expr();
                  _elem67 = new Expr();
                  _elem67.Read(iprot);
                  this.expressions.Add(_elem67);
                }
                iprot.ReadListEnd();
              }
              this.__isset.expressions = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              this.dedup = iprot.ReadBool();
              this.__isset.dedup = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                this.order_by = new List<OrderBy>();
                TList _list68 = iprot.ReadListBegin();
                for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                {
                  OrderBy _elem70 = new OrderBy();
                  _elem70 = new OrderBy();
                  _elem70.Read(iprot);
                  this.order_by.Add(_elem70);
                }
                iprot.ReadListEnd();
              }
              this.__isset.order_by = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              this.limit = iprot.ReadI64();
              this.__isset.limit = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              this.filter = iprot.ReadBinary();
              this.__isset.filter = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetPropRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.space_id) {
        field.Name = "space_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.space_id);
        oprot.WriteFieldEnd();
      }
      if (this.column_names != null && __isset.column_names) {
        field.Name = "column_names";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.column_names.Count));
          foreach (byte[] _iter71 in this.column_names)
          {
            oprot.WriteBinary(_iter71);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.parts != null && __isset.parts) {
        field.Name = "parts";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, this.parts.Count));
          foreach (int _iter72 in this.parts.Keys)
          {
            oprot.WriteI32(_iter72);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.parts[_iter72].Count));
              foreach (nebula.Row _iter73 in this.parts[_iter72])
              {
                _iter73.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.vertex_props != null && __isset.vertex_props) {
        field.Name = "vertex_props";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.vertex_props.Count));
          foreach (VertexProp _iter74 in this.vertex_props)
          {
            _iter74.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.edge_props != null && __isset.edge_props) {
        field.Name = "edge_props";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.edge_props.Count));
          foreach (EdgeProp _iter75 in this.edge_props)
          {
            _iter75.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.expressions != null && __isset.expressions) {
        field.Name = "expressions";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.expressions.Count));
          foreach (Expr _iter76 in this.expressions)
          {
            _iter76.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.dedup) {
        field.Name = "dedup";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.dedup);
        oprot.WriteFieldEnd();
      }
      if (this.order_by != null && __isset.order_by) {
        field.Name = "order_by";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.order_by.Count));
          foreach (OrderBy _iter77 in this.order_by)
          {
            _iter77.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.limit) {
        field.Name = "limit";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.limit);
        oprot.WriteFieldEnd();
      }
      if (this.filter != null && __isset.filter) {
        field.Name = "filter";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.filter);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetPropRequest(");
      sb.Append("space_id: ");
      sb.Append(this.space_id);
      sb.Append(",column_names: ");
      sb.Append(this.column_names);
      sb.Append(",parts: ");
      sb.Append(this.parts);
      sb.Append(",vertex_props: ");
      sb.Append(this.vertex_props);
      sb.Append(",edge_props: ");
      sb.Append(this.edge_props);
      sb.Append(",expressions: ");
      sb.Append(this.expressions);
      sb.Append(",dedup: ");
      sb.Append(this.dedup);
      sb.Append(",order_by: ");
      sb.Append(this.order_by);
      sb.Append(",limit: ");
      sb.Append(this.limit);
      sb.Append(",filter: ");
      sb.Append(this.filter);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
