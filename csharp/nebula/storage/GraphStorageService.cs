/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{
  public class GraphStorageService {
    public interface Iface {
      GetNeighborsResponse getNeighbors(GetNeighborsRequest req);
      GetPropResponse getProps(GetPropRequest req);
      ExecResponse addVertices(AddVerticesRequest req);
      ExecResponse addEdges(AddEdgesRequest req);
      ExecResponse deleteEdges(DeleteEdgesRequest req);
      ExecResponse deleteVertices(DeleteVerticesRequest req);
      UpdateResponse updateVertex(UpdateVertexRequest req);
      UpdateResponse updateEdge(UpdateEdgeRequest req);
      ScanVertexResponse scanVertex(ScanVertexRequest req);
      ScanEdgeResponse scanEdge(ScanEdgeRequest req);
      GetUUIDResp getUUID(GetUUIDReq req);
      LookupIndexResp lookupIndex(LookupIndexRequest req);
      GetNeighborsResponse lookupAndTraverse(LookupAndTraverseRequest req);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public GetNeighborsResponse getNeighbors(GetNeighborsRequest req)
      {
        send_getNeighbors(req);
        return recv_getNeighbors();
      }

      public void send_getNeighbors(GetNeighborsRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("getNeighbors", TMessageType.Call, seqid_));
        getNeighbors_args args = new getNeighbors_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetNeighborsResponse recv_getNeighbors()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNeighbors_result result = new getNeighbors_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNeighbors failed: unknown result");
      }

      public GetPropResponse getProps(GetPropRequest req)
      {
        send_getProps(req);
        return recv_getProps();
      }

      public void send_getProps(GetPropRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("getProps", TMessageType.Call, seqid_));
        getProps_args args = new getProps_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetPropResponse recv_getProps()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProps_result result = new getProps_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProps failed: unknown result");
      }

      public ExecResponse addVertices(AddVerticesRequest req)
      {
        send_addVertices(req);
        return recv_addVertices();
      }

      public void send_addVertices(AddVerticesRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("addVertices", TMessageType.Call, seqid_));
        addVertices_args args = new addVertices_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResponse recv_addVertices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addVertices_result result = new addVertices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addVertices failed: unknown result");
      }

      public ExecResponse addEdges(AddEdgesRequest req)
      {
        send_addEdges(req);
        return recv_addEdges();
      }

      public void send_addEdges(AddEdgesRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("addEdges", TMessageType.Call, seqid_));
        addEdges_args args = new addEdges_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResponse recv_addEdges()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addEdges_result result = new addEdges_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addEdges failed: unknown result");
      }

      public ExecResponse deleteEdges(DeleteEdgesRequest req)
      {
        send_deleteEdges(req);
        return recv_deleteEdges();
      }

      public void send_deleteEdges(DeleteEdgesRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteEdges", TMessageType.Call, seqid_));
        deleteEdges_args args = new deleteEdges_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResponse recv_deleteEdges()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteEdges_result result = new deleteEdges_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteEdges failed: unknown result");
      }

      public ExecResponse deleteVertices(DeleteVerticesRequest req)
      {
        send_deleteVertices(req);
        return recv_deleteVertices();
      }

      public void send_deleteVertices(DeleteVerticesRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteVertices", TMessageType.Call, seqid_));
        deleteVertices_args args = new deleteVertices_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ExecResponse recv_deleteVertices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteVertices_result result = new deleteVertices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteVertices failed: unknown result");
      }

      public UpdateResponse updateVertex(UpdateVertexRequest req)
      {
        send_updateVertex(req);
        return recv_updateVertex();
      }

      public void send_updateVertex(UpdateVertexRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("updateVertex", TMessageType.Call, seqid_));
        updateVertex_args args = new updateVertex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public UpdateResponse recv_updateVertex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateVertex_result result = new updateVertex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateVertex failed: unknown result");
      }

      public UpdateResponse updateEdge(UpdateEdgeRequest req)
      {
        send_updateEdge(req);
        return recv_updateEdge();
      }

      public void send_updateEdge(UpdateEdgeRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("updateEdge", TMessageType.Call, seqid_));
        updateEdge_args args = new updateEdge_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public UpdateResponse recv_updateEdge()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateEdge_result result = new updateEdge_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateEdge failed: unknown result");
      }

      public ScanVertexResponse scanVertex(ScanVertexRequest req)
      {
        send_scanVertex(req);
        return recv_scanVertex();
      }

      public void send_scanVertex(ScanVertexRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("scanVertex", TMessageType.Call, seqid_));
        scanVertex_args args = new scanVertex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ScanVertexResponse recv_scanVertex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanVertex_result result = new scanVertex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanVertex failed: unknown result");
      }

      public ScanEdgeResponse scanEdge(ScanEdgeRequest req)
      {
        send_scanEdge(req);
        return recv_scanEdge();
      }

      public void send_scanEdge(ScanEdgeRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("scanEdge", TMessageType.Call, seqid_));
        scanEdge_args args = new scanEdge_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ScanEdgeResponse recv_scanEdge()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanEdge_result result = new scanEdge_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanEdge failed: unknown result");
      }

      public GetUUIDResp getUUID(GetUUIDReq req)
      {
        send_getUUID(req);
        return recv_getUUID();
      }

      public void send_getUUID(GetUUIDReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getUUID", TMessageType.Call, seqid_));
        getUUID_args args = new getUUID_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetUUIDResp recv_getUUID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUUID_result result = new getUUID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUUID failed: unknown result");
      }

      public LookupIndexResp lookupIndex(LookupIndexRequest req)
      {
        send_lookupIndex(req);
        return recv_lookupIndex();
      }

      public void send_lookupIndex(LookupIndexRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("lookupIndex", TMessageType.Call, seqid_));
        lookupIndex_args args = new lookupIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public LookupIndexResp recv_lookupIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        lookupIndex_result result = new lookupIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lookupIndex failed: unknown result");
      }

      public GetNeighborsResponse lookupAndTraverse(LookupAndTraverseRequest req)
      {
        send_lookupAndTraverse(req);
        return recv_lookupAndTraverse();
      }

      public void send_lookupAndTraverse(LookupAndTraverseRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("lookupAndTraverse", TMessageType.Call, seqid_));
        lookupAndTraverse_args args = new lookupAndTraverse_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetNeighborsResponse recv_lookupAndTraverse()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        lookupAndTraverse_result result = new lookupAndTraverse_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lookupAndTraverse failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getNeighbors"] = getNeighbors_Process;
        processMap_["getProps"] = getProps_Process;
        processMap_["addVertices"] = addVertices_Process;
        processMap_["addEdges"] = addEdges_Process;
        processMap_["deleteEdges"] = deleteEdges_Process;
        processMap_["deleteVertices"] = deleteVertices_Process;
        processMap_["updateVertex"] = updateVertex_Process;
        processMap_["updateEdge"] = updateEdge_Process;
        processMap_["scanVertex"] = scanVertex_Process;
        processMap_["scanEdge"] = scanEdge_Process;
        processMap_["getUUID"] = getUUID_Process;
        processMap_["lookupIndex"] = lookupIndex_Process;
        processMap_["lookupAndTraverse"] = lookupAndTraverse_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getNeighbors_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNeighbors_args args = new getNeighbors_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNeighbors_result result = new getNeighbors_result();
        result.Success = iface_.getNeighbors(args.Req);
        oprot.WriteMessageBegin(new TMessage("getNeighbors", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProps_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProps_args args = new getProps_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProps_result result = new getProps_result();
        result.Success = iface_.getProps(args.Req);
        oprot.WriteMessageBegin(new TMessage("getProps", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addVertices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addVertices_args args = new addVertices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addVertices_result result = new addVertices_result();
        result.Success = iface_.addVertices(args.Req);
        oprot.WriteMessageBegin(new TMessage("addVertices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addEdges_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addEdges_args args = new addEdges_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addEdges_result result = new addEdges_result();
        result.Success = iface_.addEdges(args.Req);
        oprot.WriteMessageBegin(new TMessage("addEdges", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteEdges_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteEdges_args args = new deleteEdges_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteEdges_result result = new deleteEdges_result();
        result.Success = iface_.deleteEdges(args.Req);
        oprot.WriteMessageBegin(new TMessage("deleteEdges", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteVertices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteVertices_args args = new deleteVertices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteVertices_result result = new deleteVertices_result();
        result.Success = iface_.deleteVertices(args.Req);
        oprot.WriteMessageBegin(new TMessage("deleteVertices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateVertex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateVertex_args args = new updateVertex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateVertex_result result = new updateVertex_result();
        result.Success = iface_.updateVertex(args.Req);
        oprot.WriteMessageBegin(new TMessage("updateVertex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateEdge_args args = new updateEdge_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateEdge_result result = new updateEdge_result();
        result.Success = iface_.updateEdge(args.Req);
        oprot.WriteMessageBegin(new TMessage("updateEdge", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanVertex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanVertex_args args = new scanVertex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanVertex_result result = new scanVertex_result();
        result.Success = iface_.scanVertex(args.Req);
        oprot.WriteMessageBegin(new TMessage("scanVertex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanEdge_args args = new scanEdge_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanEdge_result result = new scanEdge_result();
        result.Success = iface_.scanEdge(args.Req);
        oprot.WriteMessageBegin(new TMessage("scanEdge", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUUID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUUID_args args = new getUUID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUUID_result result = new getUUID_result();
        result.Success = iface_.getUUID(args.Req);
        oprot.WriteMessageBegin(new TMessage("getUUID", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void lookupIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        lookupIndex_args args = new lookupIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        lookupIndex_result result = new lookupIndex_result();
        result.Success = iface_.lookupIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("lookupIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void lookupAndTraverse_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        lookupAndTraverse_args args = new lookupAndTraverse_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        lookupAndTraverse_result result = new lookupAndTraverse_result();
        result.Success = iface_.lookupAndTraverse(args.Req);
        oprot.WriteMessageBegin(new TMessage("lookupAndTraverse", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class getNeighbors_args : TBase
    {
      private GetNeighborsRequest req;

      public GetNeighborsRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getNeighbors_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetNeighborsRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNeighbors_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNeighbors_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getNeighbors_result : TBase
    {
      private GetNeighborsResponse success;

      public GetNeighborsResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getNeighbors_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetNeighborsResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNeighbors_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNeighbors_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getProps_args : TBase
    {
      private GetPropRequest req;

      public GetPropRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getProps_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetPropRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProps_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProps_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getProps_result : TBase
    {
      private GetPropResponse success;

      public GetPropResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getProps_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetPropResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProps_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProps_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addVertices_args : TBase
    {
      private AddVerticesRequest req;

      public AddVerticesRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public addVertices_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AddVerticesRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addVertices_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addVertices_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addVertices_result : TBase
    {
      private ExecResponse success;

      public ExecResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public addVertices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addVertices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addVertices_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addEdges_args : TBase
    {
      private AddEdgesRequest req;

      public AddEdgesRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public addEdges_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AddEdgesRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addEdges_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addEdges_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addEdges_result : TBase
    {
      private ExecResponse success;

      public ExecResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public addEdges_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addEdges_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addEdges_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class deleteEdges_args : TBase
    {
      private DeleteEdgesRequest req;

      public DeleteEdgesRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public deleteEdges_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DeleteEdgesRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteEdges_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteEdges_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class deleteEdges_result : TBase
    {
      private ExecResponse success;

      public ExecResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public deleteEdges_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteEdges_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteEdges_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class deleteVertices_args : TBase
    {
      private DeleteVerticesRequest req;

      public DeleteVerticesRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public deleteVertices_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DeleteVerticesRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteVertices_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteVertices_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class deleteVertices_result : TBase
    {
      private ExecResponse success;

      public ExecResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public deleteVertices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ExecResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteVertices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteVertices_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateVertex_args : TBase
    {
      private UpdateVertexRequest req;

      public UpdateVertexRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public updateVertex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new UpdateVertexRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateVertex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateVertex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateVertex_result : TBase
    {
      private UpdateResponse success;

      public UpdateResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public updateVertex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new UpdateResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateVertex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateVertex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateEdge_args : TBase
    {
      private UpdateEdgeRequest req;

      public UpdateEdgeRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public updateEdge_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new UpdateEdgeRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateEdge_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateEdge_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class updateEdge_result : TBase
    {
      private UpdateResponse success;

      public UpdateResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public updateEdge_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new UpdateResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateEdge_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateEdge_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanVertex_args : TBase
    {
      private ScanVertexRequest req;

      public ScanVertexRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public scanVertex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ScanVertexRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanVertex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanVertex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanVertex_result : TBase
    {
      private ScanVertexResponse success;

      public ScanVertexResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public scanVertex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ScanVertexResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanVertex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanVertex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanEdge_args : TBase
    {
      private ScanEdgeRequest req;

      public ScanEdgeRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public scanEdge_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new ScanEdgeRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanEdge_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanEdge_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanEdge_result : TBase
    {
      private ScanEdgeResponse success;

      public ScanEdgeResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public scanEdge_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ScanEdgeResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanEdge_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanEdge_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getUUID_args : TBase
    {
      private GetUUIDReq req;

      public GetUUIDReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getUUID_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetUUIDReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUUID_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUUID_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getUUID_result : TBase
    {
      private GetUUIDResp success;

      public GetUUIDResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getUUID_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetUUIDResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUUID_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUUID_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class lookupIndex_args : TBase
    {
      private LookupIndexRequest req;

      public LookupIndexRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public lookupIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new LookupIndexRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("lookupIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("lookupIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class lookupIndex_result : TBase
    {
      private LookupIndexResp success;

      public LookupIndexResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public lookupIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new LookupIndexResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("lookupIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("lookupIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class lookupAndTraverse_args : TBase
    {
      private LookupAndTraverseRequest req;

      public LookupAndTraverseRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public lookupAndTraverse_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new LookupAndTraverseRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("lookupAndTraverse_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("lookupAndTraverse_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class lookupAndTraverse_result : TBase
    {
      private GetNeighborsResponse success;

      public GetNeighborsResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public lookupAndTraverse_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetNeighborsResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("lookupAndTraverse_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("lookupAndTraverse_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
