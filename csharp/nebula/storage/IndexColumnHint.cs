/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class IndexColumnHint : TBase
  {
    private byte[] column_name;
    private ScanType scan_type;
    private nebula.Value begin_value;
    private nebula.Value end_value;

    public byte[] Column_name
    {
      get
      {
        return column_name;
      }
      set
      {
        __isset.column_name = true;
        this.column_name = value;
      }
    }

    public ScanType Scan_type
    {
      get
      {
        return scan_type;
      }
      set
      {
        __isset.scan_type = true;
        this.scan_type = value;
      }
    }

    public nebula.Value Begin_value
    {
      get
      {
        return begin_value;
      }
      set
      {
        __isset.begin_value = true;
        this.begin_value = value;
      }
    }

    public nebula.Value End_value
    {
      get
      {
        return end_value;
      }
      set
      {
        __isset.end_value = true;
        this.end_value = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool column_name;
      public bool scan_type;
      public bool begin_value;
      public bool end_value;
    }

    public IndexColumnHint() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.column_name = iprot.ReadBinary();
              this.__isset.column_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.scan_type = (ScanType)iprot.ReadI32();
              this.__isset.scan_type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              this.begin_value = new nebula.Value();
              this.begin_value.Read(iprot);
              this.__isset.begin_value = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              this.end_value = new nebula.Value();
              this.end_value.Read(iprot);
              this.__isset.end_value = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("IndexColumnHint");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.column_name != null && __isset.column_name) {
        field.Name = "column_name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.column_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.scan_type) {
        field.Name = "scan_type";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.scan_type);
        oprot.WriteFieldEnd();
      }
      if (this.begin_value != null && __isset.begin_value) {
        field.Name = "begin_value";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        this.begin_value.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.end_value != null && __isset.end_value) {
        field.Name = "end_value";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        this.end_value.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("IndexColumnHint(");
      sb.Append("column_name: ");
      sb.Append(this.column_name);
      sb.Append(",scan_type: ");
      sb.Append(this.scan_type);
      sb.Append(",begin_value: ");
      sb.Append(this.begin_value== null ? "<null>" : this.begin_value.ToString());
      sb.Append(",end_value: ");
      sb.Append(this.end_value== null ? "<null>" : this.end_value.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
