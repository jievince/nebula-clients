/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class IndexSpec : TBase
  {
    private List<IndexQueryContext> contexts;
    private bool is_edge;
    private int tag_or_edge_id;

    public List<IndexQueryContext> Contexts
    {
      get
      {
        return contexts;
      }
      set
      {
        __isset.contexts = true;
        this.contexts = value;
      }
    }

    public bool Is_edge
    {
      get
      {
        return is_edge;
      }
      set
      {
        __isset.is_edge = true;
        this.is_edge = value;
      }
    }

    public int Tag_or_edge_id
    {
      get
      {
        return tag_or_edge_id;
      }
      set
      {
        __isset.tag_or_edge_id = true;
        this.tag_or_edge_id = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool contexts;
      public bool is_edge;
      public bool tag_or_edge_id;
    }

    public IndexSpec() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                this.contexts = new List<IndexQueryContext>();
                TList _list159 = iprot.ReadListBegin();
                for( int _i160 = 0; _i160 < _list159.Count; ++_i160)
                {
                  IndexQueryContext _elem161 = new IndexQueryContext();
                  _elem161 = new IndexQueryContext();
                  _elem161.Read(iprot);
                  this.contexts.Add(_elem161);
                }
                iprot.ReadListEnd();
              }
              this.__isset.contexts = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              this.is_edge = iprot.ReadBool();
              this.__isset.is_edge = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              this.tag_or_edge_id = iprot.ReadI32();
              this.__isset.tag_or_edge_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("IndexSpec");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.contexts != null && __isset.contexts) {
        field.Name = "contexts";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.contexts.Count));
          foreach (IndexQueryContext _iter162 in this.contexts)
          {
            _iter162.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.is_edge) {
        field.Name = "is_edge";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.is_edge);
        oprot.WriteFieldEnd();
      }
      if (__isset.tag_or_edge_id) {
        field.Name = "tag_or_edge_id";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.tag_or_edge_id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("IndexSpec(");
      sb.Append("contexts: ");
      sb.Append(this.contexts);
      sb.Append(",is_edge: ");
      sb.Append(this.is_edge);
      sb.Append(",tag_or_edge_id: ");
      sb.Append(this.tag_or_edge_id);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
