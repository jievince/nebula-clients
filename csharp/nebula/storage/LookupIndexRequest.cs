/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class LookupIndexRequest : TBase
  {
    private int space_id;
    private List<int> parts;
    private IndexSpec indices;
    private List<byte[]> return_columns;

    public int Space_id
    {
      get
      {
        return space_id;
      }
      set
      {
        __isset.space_id = true;
        this.space_id = value;
      }
    }

    public List<int> Parts
    {
      get
      {
        return parts;
      }
      set
      {
        __isset.parts = true;
        this.parts = value;
      }
    }

    public IndexSpec Indices
    {
      get
      {
        return indices;
      }
      set
      {
        __isset.indices = true;
        this.indices = value;
      }
    }

    public List<byte[]> Return_columns
    {
      get
      {
        return return_columns;
      }
      set
      {
        __isset.return_columns = true;
        this.return_columns = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space_id;
      public bool parts;
      public bool indices;
      public bool return_columns;
    }

    public LookupIndexRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.space_id = iprot.ReadI32();
              this.__isset.space_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                this.parts = new List<int>();
                TList _list163 = iprot.ReadListBegin();
                for( int _i164 = 0; _i164 < _list163.Count; ++_i164)
                {
                  int _elem165 = 0;
                  _elem165 = iprot.ReadI32();
                  this.parts.Add(_elem165);
                }
                iprot.ReadListEnd();
              }
              this.__isset.parts = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              this.indices = new IndexSpec();
              this.indices.Read(iprot);
              this.__isset.indices = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                this.return_columns = new List<byte[]>();
                TList _list166 = iprot.ReadListBegin();
                for( int _i167 = 0; _i167 < _list166.Count; ++_i167)
                {
                  byte[] _elem168 = null;
                  _elem168 = iprot.ReadBinary();
                  this.return_columns.Add(_elem168);
                }
                iprot.ReadListEnd();
              }
              this.__isset.return_columns = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LookupIndexRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.space_id) {
        field.Name = "space_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.space_id);
        oprot.WriteFieldEnd();
      }
      if (this.parts != null && __isset.parts) {
        field.Name = "parts";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, this.parts.Count));
          foreach (int _iter169 in this.parts)
          {
            oprot.WriteI32(_iter169);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.indices != null && __isset.indices) {
        field.Name = "indices";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        this.indices.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.return_columns != null && __isset.return_columns) {
        field.Name = "return_columns";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.return_columns.Count));
          foreach (byte[] _iter170 in this.return_columns)
          {
            oprot.WriteBinary(_iter170);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LookupIndexRequest(");
      sb.Append("space_id: ");
      sb.Append(this.space_id);
      sb.Append(",parts: ");
      sb.Append(this.parts);
      sb.Append(",indices: ");
      sb.Append(this.indices== null ? "<null>" : this.indices.ToString());
      sb.Append(",return_columns: ");
      sb.Append(this.return_columns);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
