/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class NewVertex : TBase
  {
    private nebula.Value id;
    private List<NewTag> tags;

    public nebula.Value Id
    {
      get
      {
        return id;
      }
      set
      {
        __isset.id = true;
        this.id = value;
      }
    }

    public List<NewTag> Tags
    {
      get
      {
        return tags;
      }
      set
      {
        __isset.tags = true;
        this.tags = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool tags;
    }

    public NewVertex() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              this.id = new nebula.Value();
              this.id.Read(iprot);
              this.__isset.id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                this.tags = new List<NewTag>();
                TList _list82 = iprot.ReadListBegin();
                for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                {
                  NewTag _elem84 = new NewTag();
                  _elem84 = new NewTag();
                  _elem84.Read(iprot);
                  this.tags.Add(_elem84);
                }
                iprot.ReadListEnd();
              }
              this.__isset.tags = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NewVertex");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        this.id.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.tags != null && __isset.tags) {
        field.Name = "tags";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.tags.Count));
          foreach (NewTag _iter85 in this.tags)
          {
            _iter85.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NewVertex(");
      sb.Append("id: ");
      sb.Append(this.id== null ? "<null>" : this.id.ToString());
      sb.Append(",tags: ");
      sb.Append(this.tags);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
