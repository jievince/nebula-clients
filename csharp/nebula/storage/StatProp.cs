/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class StatProp : TBase
  {
    private byte[] alias;
    private byte[] prop;
    private StatType stat;

    public byte[] Alias
    {
      get
      {
        return alias;
      }
      set
      {
        __isset.alias = true;
        this.alias = value;
      }
    }

    public byte[] Prop
    {
      get
      {
        return prop;
      }
      set
      {
        __isset.prop = true;
        this.prop = value;
      }
    }

    public StatType Stat
    {
      get
      {
        return stat;
      }
      set
      {
        __isset.stat = true;
        this.stat = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool alias;
      public bool prop;
      public bool stat;
    }

    public StatProp() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.alias = iprot.ReadBinary();
              this.__isset.alias = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.prop = iprot.ReadBinary();
              this.__isset.prop = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              this.stat = (StatType)iprot.ReadI32();
              this.__isset.stat = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StatProp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.alias != null && __isset.alias) {
        field.Name = "alias";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.alias);
        oprot.WriteFieldEnd();
      }
      if (this.prop != null && __isset.prop) {
        field.Name = "prop";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.prop);
        oprot.WriteFieldEnd();
      }
      if (__isset.stat) {
        field.Name = "stat";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.stat);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StatProp(");
      sb.Append("alias: ");
      sb.Append(this.alias);
      sb.Append(",prop: ");
      sb.Append(this.prop);
      sb.Append(",stat: ");
      sb.Append(this.stat);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
