/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{
  public class StorageAdminService {
    public interface Iface {
      AdminExecResp transLeader(TransLeaderReq req);
      AdminExecResp addPart(AddPartReq req);
      AdminExecResp addLearner(AddLearnerReq req);
      AdminExecResp removePart(RemovePartReq req);
      AdminExecResp memberChange(MemberChangeReq req);
      AdminExecResp waitingForCatchUpData(CatchUpDataReq req);
      AdminExecResp createCheckpoint(CreateCPRequest req);
      AdminExecResp dropCheckpoint(DropCPRequest req);
      AdminExecResp blockingWrites(BlockingSignRequest req);
      AdminExecResp rebuildTagIndex(RebuildIndexRequest req);
      AdminExecResp rebuildEdgeIndex(RebuildIndexRequest req);
      GetLeaderPartsResp getLeaderParts(GetLeaderReq req);
      AdminExecResp checkPeers(CheckPeersReq req);
      AdminExecResp addAdminTask(AddAdminTaskRequest req);
      AdminExecResp stopAdminTask(StopAdminTaskRequest req);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public AdminExecResp transLeader(TransLeaderReq req)
      {
        send_transLeader(req);
        return recv_transLeader();
      }

      public void send_transLeader(TransLeaderReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("transLeader", TMessageType.Call, seqid_));
        transLeader_args args = new transLeader_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_transLeader()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        transLeader_result result = new transLeader_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "transLeader failed: unknown result");
      }

      public AdminExecResp addPart(AddPartReq req)
      {
        send_addPart(req);
        return recv_addPart();
      }

      public void send_addPart(AddPartReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("addPart", TMessageType.Call, seqid_));
        addPart_args args = new addPart_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_addPart()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addPart_result result = new addPart_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addPart failed: unknown result");
      }

      public AdminExecResp addLearner(AddLearnerReq req)
      {
        send_addLearner(req);
        return recv_addLearner();
      }

      public void send_addLearner(AddLearnerReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("addLearner", TMessageType.Call, seqid_));
        addLearner_args args = new addLearner_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_addLearner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addLearner_result result = new addLearner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addLearner failed: unknown result");
      }

      public AdminExecResp removePart(RemovePartReq req)
      {
        send_removePart(req);
        return recv_removePart();
      }

      public void send_removePart(RemovePartReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("removePart", TMessageType.Call, seqid_));
        removePart_args args = new removePart_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_removePart()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removePart_result result = new removePart_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removePart failed: unknown result");
      }

      public AdminExecResp memberChange(MemberChangeReq req)
      {
        send_memberChange(req);
        return recv_memberChange();
      }

      public void send_memberChange(MemberChangeReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("memberChange", TMessageType.Call, seqid_));
        memberChange_args args = new memberChange_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_memberChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        memberChange_result result = new memberChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "memberChange failed: unknown result");
      }

      public AdminExecResp waitingForCatchUpData(CatchUpDataReq req)
      {
        send_waitingForCatchUpData(req);
        return recv_waitingForCatchUpData();
      }

      public void send_waitingForCatchUpData(CatchUpDataReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("waitingForCatchUpData", TMessageType.Call, seqid_));
        waitingForCatchUpData_args args = new waitingForCatchUpData_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_waitingForCatchUpData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        waitingForCatchUpData_result result = new waitingForCatchUpData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "waitingForCatchUpData failed: unknown result");
      }

      public AdminExecResp createCheckpoint(CreateCPRequest req)
      {
        send_createCheckpoint(req);
        return recv_createCheckpoint();
      }

      public void send_createCheckpoint(CreateCPRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("createCheckpoint", TMessageType.Call, seqid_));
        createCheckpoint_args args = new createCheckpoint_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_createCheckpoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createCheckpoint_result result = new createCheckpoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createCheckpoint failed: unknown result");
      }

      public AdminExecResp dropCheckpoint(DropCPRequest req)
      {
        send_dropCheckpoint(req);
        return recv_dropCheckpoint();
      }

      public void send_dropCheckpoint(DropCPRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("dropCheckpoint", TMessageType.Call, seqid_));
        dropCheckpoint_args args = new dropCheckpoint_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_dropCheckpoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        dropCheckpoint_result result = new dropCheckpoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropCheckpoint failed: unknown result");
      }

      public AdminExecResp blockingWrites(BlockingSignRequest req)
      {
        send_blockingWrites(req);
        return recv_blockingWrites();
      }

      public void send_blockingWrites(BlockingSignRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("blockingWrites", TMessageType.Call, seqid_));
        blockingWrites_args args = new blockingWrites_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_blockingWrites()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        blockingWrites_result result = new blockingWrites_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "blockingWrites failed: unknown result");
      }

      public AdminExecResp rebuildTagIndex(RebuildIndexRequest req)
      {
        send_rebuildTagIndex(req);
        return recv_rebuildTagIndex();
      }

      public void send_rebuildTagIndex(RebuildIndexRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("rebuildTagIndex", TMessageType.Call, seqid_));
        rebuildTagIndex_args args = new rebuildTagIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_rebuildTagIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rebuildTagIndex_result result = new rebuildTagIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rebuildTagIndex failed: unknown result");
      }

      public AdminExecResp rebuildEdgeIndex(RebuildIndexRequest req)
      {
        send_rebuildEdgeIndex(req);
        return recv_rebuildEdgeIndex();
      }

      public void send_rebuildEdgeIndex(RebuildIndexRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("rebuildEdgeIndex", TMessageType.Call, seqid_));
        rebuildEdgeIndex_args args = new rebuildEdgeIndex_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_rebuildEdgeIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rebuildEdgeIndex_result result = new rebuildEdgeIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rebuildEdgeIndex failed: unknown result");
      }

      public GetLeaderPartsResp getLeaderParts(GetLeaderReq req)
      {
        send_getLeaderParts(req);
        return recv_getLeaderParts();
      }

      public void send_getLeaderParts(GetLeaderReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("getLeaderParts", TMessageType.Call, seqid_));
        getLeaderParts_args args = new getLeaderParts_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetLeaderPartsResp recv_getLeaderParts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getLeaderParts_result result = new getLeaderParts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLeaderParts failed: unknown result");
      }

      public AdminExecResp checkPeers(CheckPeersReq req)
      {
        send_checkPeers(req);
        return recv_checkPeers();
      }

      public void send_checkPeers(CheckPeersReq req)
      {
        oprot_.WriteMessageBegin(new TMessage("checkPeers", TMessageType.Call, seqid_));
        checkPeers_args args = new checkPeers_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_checkPeers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkPeers_result result = new checkPeers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkPeers failed: unknown result");
      }

      public AdminExecResp addAdminTask(AddAdminTaskRequest req)
      {
        send_addAdminTask(req);
        return recv_addAdminTask();
      }

      public void send_addAdminTask(AddAdminTaskRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("addAdminTask", TMessageType.Call, seqid_));
        addAdminTask_args args = new addAdminTask_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_addAdminTask()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addAdminTask_result result = new addAdminTask_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addAdminTask failed: unknown result");
      }

      public AdminExecResp stopAdminTask(StopAdminTaskRequest req)
      {
        send_stopAdminTask(req);
        return recv_stopAdminTask();
      }

      public void send_stopAdminTask(StopAdminTaskRequest req)
      {
        oprot_.WriteMessageBegin(new TMessage("stopAdminTask", TMessageType.Call, seqid_));
        stopAdminTask_args args = new stopAdminTask_args();
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public AdminExecResp recv_stopAdminTask()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        stopAdminTask_result result = new stopAdminTask_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "stopAdminTask failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["transLeader"] = transLeader_Process;
        processMap_["addPart"] = addPart_Process;
        processMap_["addLearner"] = addLearner_Process;
        processMap_["removePart"] = removePart_Process;
        processMap_["memberChange"] = memberChange_Process;
        processMap_["waitingForCatchUpData"] = waitingForCatchUpData_Process;
        processMap_["createCheckpoint"] = createCheckpoint_Process;
        processMap_["dropCheckpoint"] = dropCheckpoint_Process;
        processMap_["blockingWrites"] = blockingWrites_Process;
        processMap_["rebuildTagIndex"] = rebuildTagIndex_Process;
        processMap_["rebuildEdgeIndex"] = rebuildEdgeIndex_Process;
        processMap_["getLeaderParts"] = getLeaderParts_Process;
        processMap_["checkPeers"] = checkPeers_Process;
        processMap_["addAdminTask"] = addAdminTask_Process;
        processMap_["stopAdminTask"] = stopAdminTask_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void transLeader_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        transLeader_args args = new transLeader_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        transLeader_result result = new transLeader_result();
        result.Success = iface_.transLeader(args.Req);
        oprot.WriteMessageBegin(new TMessage("transLeader", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addPart_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addPart_args args = new addPart_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addPart_result result = new addPart_result();
        result.Success = iface_.addPart(args.Req);
        oprot.WriteMessageBegin(new TMessage("addPart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addLearner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addLearner_args args = new addLearner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addLearner_result result = new addLearner_result();
        result.Success = iface_.addLearner(args.Req);
        oprot.WriteMessageBegin(new TMessage("addLearner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removePart_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removePart_args args = new removePart_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removePart_result result = new removePart_result();
        result.Success = iface_.removePart(args.Req);
        oprot.WriteMessageBegin(new TMessage("removePart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void memberChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        memberChange_args args = new memberChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        memberChange_result result = new memberChange_result();
        result.Success = iface_.memberChange(args.Req);
        oprot.WriteMessageBegin(new TMessage("memberChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void waitingForCatchUpData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        waitingForCatchUpData_args args = new waitingForCatchUpData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        waitingForCatchUpData_result result = new waitingForCatchUpData_result();
        result.Success = iface_.waitingForCatchUpData(args.Req);
        oprot.WriteMessageBegin(new TMessage("waitingForCatchUpData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createCheckpoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createCheckpoint_args args = new createCheckpoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createCheckpoint_result result = new createCheckpoint_result();
        result.Success = iface_.createCheckpoint(args.Req);
        oprot.WriteMessageBegin(new TMessage("createCheckpoint", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void dropCheckpoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        dropCheckpoint_args args = new dropCheckpoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        dropCheckpoint_result result = new dropCheckpoint_result();
        result.Success = iface_.dropCheckpoint(args.Req);
        oprot.WriteMessageBegin(new TMessage("dropCheckpoint", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void blockingWrites_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        blockingWrites_args args = new blockingWrites_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        blockingWrites_result result = new blockingWrites_result();
        result.Success = iface_.blockingWrites(args.Req);
        oprot.WriteMessageBegin(new TMessage("blockingWrites", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rebuildTagIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rebuildTagIndex_args args = new rebuildTagIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rebuildTagIndex_result result = new rebuildTagIndex_result();
        result.Success = iface_.rebuildTagIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("rebuildTagIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rebuildEdgeIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rebuildEdgeIndex_args args = new rebuildEdgeIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rebuildEdgeIndex_result result = new rebuildEdgeIndex_result();
        result.Success = iface_.rebuildEdgeIndex(args.Req);
        oprot.WriteMessageBegin(new TMessage("rebuildEdgeIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getLeaderParts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getLeaderParts_args args = new getLeaderParts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getLeaderParts_result result = new getLeaderParts_result();
        result.Success = iface_.getLeaderParts(args.Req);
        oprot.WriteMessageBegin(new TMessage("getLeaderParts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkPeers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkPeers_args args = new checkPeers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkPeers_result result = new checkPeers_result();
        result.Success = iface_.checkPeers(args.Req);
        oprot.WriteMessageBegin(new TMessage("checkPeers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addAdminTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addAdminTask_args args = new addAdminTask_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addAdminTask_result result = new addAdminTask_result();
        result.Success = iface_.addAdminTask(args.Req);
        oprot.WriteMessageBegin(new TMessage("addAdminTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void stopAdminTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        stopAdminTask_args args = new stopAdminTask_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        stopAdminTask_result result = new stopAdminTask_result();
        result.Success = iface_.stopAdminTask(args.Req);
        oprot.WriteMessageBegin(new TMessage("stopAdminTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class transLeader_args : TBase
    {
      private TransLeaderReq req;

      public TransLeaderReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public transLeader_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new TransLeaderReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("transLeader_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("transLeader_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class transLeader_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public transLeader_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("transLeader_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("transLeader_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addPart_args : TBase
    {
      private AddPartReq req;

      public AddPartReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public addPart_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AddPartReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addPart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addPart_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addPart_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public addPart_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addPart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addPart_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addLearner_args : TBase
    {
      private AddLearnerReq req;

      public AddLearnerReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public addLearner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AddLearnerReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addLearner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addLearner_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addLearner_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public addLearner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addLearner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addLearner_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class removePart_args : TBase
    {
      private RemovePartReq req;

      public RemovePartReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public removePart_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new RemovePartReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removePart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removePart_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class removePart_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public removePart_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removePart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removePart_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class memberChange_args : TBase
    {
      private MemberChangeReq req;

      public MemberChangeReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public memberChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new MemberChangeReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("memberChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("memberChange_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class memberChange_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public memberChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("memberChange_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("memberChange_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class waitingForCatchUpData_args : TBase
    {
      private CatchUpDataReq req;

      public CatchUpDataReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public waitingForCatchUpData_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CatchUpDataReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("waitingForCatchUpData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("waitingForCatchUpData_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class waitingForCatchUpData_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public waitingForCatchUpData_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("waitingForCatchUpData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("waitingForCatchUpData_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createCheckpoint_args : TBase
    {
      private CreateCPRequest req;

      public CreateCPRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public createCheckpoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CreateCPRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createCheckpoint_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createCheckpoint_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class createCheckpoint_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public createCheckpoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createCheckpoint_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createCheckpoint_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropCheckpoint_args : TBase
    {
      private DropCPRequest req;

      public DropCPRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public dropCheckpoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new DropCPRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropCheckpoint_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropCheckpoint_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class dropCheckpoint_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public dropCheckpoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dropCheckpoint_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dropCheckpoint_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class blockingWrites_args : TBase
    {
      private BlockingSignRequest req;

      public BlockingSignRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public blockingWrites_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new BlockingSignRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("blockingWrites_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("blockingWrites_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class blockingWrites_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public blockingWrites_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("blockingWrites_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("blockingWrites_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rebuildTagIndex_args : TBase
    {
      private RebuildIndexRequest req;

      public RebuildIndexRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public rebuildTagIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new RebuildIndexRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebuildTagIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebuildTagIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rebuildTagIndex_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public rebuildTagIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebuildTagIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebuildTagIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rebuildEdgeIndex_args : TBase
    {
      private RebuildIndexRequest req;

      public RebuildIndexRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public rebuildEdgeIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new RebuildIndexRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebuildEdgeIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebuildEdgeIndex_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rebuildEdgeIndex_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public rebuildEdgeIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebuildEdgeIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebuildEdgeIndex_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getLeaderParts_args : TBase
    {
      private GetLeaderReq req;

      public GetLeaderReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public getLeaderParts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new GetLeaderReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLeaderParts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLeaderParts_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getLeaderParts_result : TBase
    {
      private GetLeaderPartsResp success;

      public GetLeaderPartsResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public getLeaderParts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetLeaderPartsResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLeaderParts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLeaderParts_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class checkPeers_args : TBase
    {
      private CheckPeersReq req;

      public CheckPeersReq Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public checkPeers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new CheckPeersReq();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkPeers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkPeers_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class checkPeers_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public checkPeers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkPeers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkPeers_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addAdminTask_args : TBase
    {
      private AddAdminTaskRequest req;

      public AddAdminTaskRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public addAdminTask_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new AddAdminTaskRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addAdminTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addAdminTask_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class addAdminTask_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public addAdminTask_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addAdminTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addAdminTask_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class stopAdminTask_args : TBase
    {
      private StopAdminTaskRequest req;

      public StopAdminTaskRequest Req
      {
        get
        {
          return req;
        }
        set
        {
          __isset.req = true;
          this.req = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool req;
      }

      public stopAdminTask_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.req = new StopAdminTaskRequest();
                this.req.Read(iprot);
                this.__isset.req = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("stopAdminTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("stopAdminTask_args(");
        sb.Append("req: ");
        sb.Append(this.req== null ? "<null>" : this.req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class stopAdminTask_result : TBase
    {
      private AdminExecResp success;

      public AdminExecResp Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public stopAdminTask_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new AdminExecResp();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("stopAdminTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("stopAdminTask_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
