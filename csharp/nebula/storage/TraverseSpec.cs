/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class TraverseSpec : TBase
  {
    private List<int> edge_types;
    private EdgeDirection edge_direction;
    private bool dedup;
    private List<StatProp> stat_props;
    private List<VertexProp> vertex_props;
    private List<EdgeProp> edge_props;
    private List<Expr> expressions;
    private List<OrderBy> order_by;
    private bool random;
    private long limit;
    private byte[] filter;

    public List<int> Edge_types
    {
      get
      {
        return edge_types;
      }
      set
      {
        __isset.edge_types = true;
        this.edge_types = value;
      }
    }

    public EdgeDirection Edge_direction
    {
      get
      {
        return edge_direction;
      }
      set
      {
        __isset.edge_direction = true;
        this.edge_direction = value;
      }
    }

    public bool Dedup
    {
      get
      {
        return dedup;
      }
      set
      {
        __isset.dedup = true;
        this.dedup = value;
      }
    }

    public List<StatProp> Stat_props
    {
      get
      {
        return stat_props;
      }
      set
      {
        __isset.stat_props = true;
        this.stat_props = value;
      }
    }

    public List<VertexProp> Vertex_props
    {
      get
      {
        return vertex_props;
      }
      set
      {
        __isset.vertex_props = true;
        this.vertex_props = value;
      }
    }

    public List<EdgeProp> Edge_props
    {
      get
      {
        return edge_props;
      }
      set
      {
        __isset.edge_props = true;
        this.edge_props = value;
      }
    }

    public List<Expr> Expressions
    {
      get
      {
        return expressions;
      }
      set
      {
        __isset.expressions = true;
        this.expressions = value;
      }
    }

    public List<OrderBy> Order_by
    {
      get
      {
        return order_by;
      }
      set
      {
        __isset.order_by = true;
        this.order_by = value;
      }
    }

    public bool Random
    {
      get
      {
        return random;
      }
      set
      {
        __isset.random = true;
        this.random = value;
      }
    }

    public long Limit
    {
      get
      {
        return limit;
      }
      set
      {
        __isset.limit = true;
        this.limit = value;
      }
    }

    public byte[] Filter
    {
      get
      {
        return filter;
      }
      set
      {
        __isset.filter = true;
        this.filter = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool edge_types;
      public bool edge_direction;
      public bool dedup;
      public bool stat_props;
      public bool vertex_props;
      public bool edge_props;
      public bool expressions;
      public bool order_by;
      public bool random;
      public bool limit;
      public bool filter;
    }

    public TraverseSpec() {
      this.edge_direction = (EdgeDirection)1;
      this.dedup = false;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                this.edge_types = new List<int>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  int _elem14 = 0;
                  _elem14 = iprot.ReadI32();
                  this.edge_types.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
              this.__isset.edge_types = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.edge_direction = (EdgeDirection)iprot.ReadI32();
              this.__isset.edge_direction = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              this.dedup = iprot.ReadBool();
              this.__isset.dedup = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                this.stat_props = new List<StatProp>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  StatProp _elem17 = new StatProp();
                  _elem17 = new StatProp();
                  _elem17.Read(iprot);
                  this.stat_props.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
              this.__isset.stat_props = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                this.vertex_props = new List<VertexProp>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  VertexProp _elem20 = new VertexProp();
                  _elem20 = new VertexProp();
                  _elem20.Read(iprot);
                  this.vertex_props.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
              this.__isset.vertex_props = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                this.edge_props = new List<EdgeProp>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  EdgeProp _elem23 = new EdgeProp();
                  _elem23 = new EdgeProp();
                  _elem23.Read(iprot);
                  this.edge_props.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
              this.__isset.edge_props = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                this.expressions = new List<Expr>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  Expr _elem26 = new Expr();
                  _elem26 = new Expr();
                  _elem26.Read(iprot);
                  this.expressions.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
              this.__isset.expressions = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                this.order_by = new List<OrderBy>();
                TList _list27 = iprot.ReadListBegin();
                for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                {
                  OrderBy _elem29 = new OrderBy();
                  _elem29 = new OrderBy();
                  _elem29.Read(iprot);
                  this.order_by.Add(_elem29);
                }
                iprot.ReadListEnd();
              }
              this.__isset.order_by = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              this.random = iprot.ReadBool();
              this.__isset.random = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              this.limit = iprot.ReadI64();
              this.__isset.limit = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              this.filter = iprot.ReadBinary();
              this.__isset.filter = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TraverseSpec");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.edge_types != null && __isset.edge_types) {
        field.Name = "edge_types";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, this.edge_types.Count));
          foreach (int _iter30 in this.edge_types)
          {
            oprot.WriteI32(_iter30);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.edge_direction) {
        field.Name = "edge_direction";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.edge_direction);
        oprot.WriteFieldEnd();
      }
      if (__isset.dedup) {
        field.Name = "dedup";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.dedup);
        oprot.WriteFieldEnd();
      }
      if (this.stat_props != null && __isset.stat_props) {
        field.Name = "stat_props";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.stat_props.Count));
          foreach (StatProp _iter31 in this.stat_props)
          {
            _iter31.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.vertex_props != null && __isset.vertex_props) {
        field.Name = "vertex_props";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.vertex_props.Count));
          foreach (VertexProp _iter32 in this.vertex_props)
          {
            _iter32.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.edge_props != null && __isset.edge_props) {
        field.Name = "edge_props";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.edge_props.Count));
          foreach (EdgeProp _iter33 in this.edge_props)
          {
            _iter33.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.expressions != null && __isset.expressions) {
        field.Name = "expressions";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.expressions.Count));
          foreach (Expr _iter34 in this.expressions)
          {
            _iter34.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.order_by != null && __isset.order_by) {
        field.Name = "order_by";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.order_by.Count));
          foreach (OrderBy _iter35 in this.order_by)
          {
            _iter35.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.random) {
        field.Name = "random";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.random);
        oprot.WriteFieldEnd();
      }
      if (__isset.limit) {
        field.Name = "limit";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.limit);
        oprot.WriteFieldEnd();
      }
      if (this.filter != null && __isset.filter) {
        field.Name = "filter";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.filter);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TraverseSpec(");
      sb.Append("edge_types: ");
      sb.Append(this.edge_types);
      sb.Append(",edge_direction: ");
      sb.Append(this.edge_direction);
      sb.Append(",dedup: ");
      sb.Append(this.dedup);
      sb.Append(",stat_props: ");
      sb.Append(this.stat_props);
      sb.Append(",vertex_props: ");
      sb.Append(this.vertex_props);
      sb.Append(",edge_props: ");
      sb.Append(this.edge_props);
      sb.Append(",expressions: ");
      sb.Append(this.expressions);
      sb.Append(",order_by: ");
      sb.Append(this.order_by);
      sb.Append(",random: ");
      sb.Append(this.random);
      sb.Append(",limit: ");
      sb.Append(this.limit);
      sb.Append(",filter: ");
      sb.Append(this.filter);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
