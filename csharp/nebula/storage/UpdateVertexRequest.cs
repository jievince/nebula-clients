/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace nebula.storage
{

  [Serializable]
  public partial class UpdateVertexRequest : TBase
  {
    private int space_id;
    private int part_id;
    private nebula.Value vertex_id;
    private int tag_id;
    private List<UpdatedProp> updated_props;
    private bool insertable;
    private List<byte[]> return_props;
    private byte[] condition;

    public int Space_id
    {
      get
      {
        return space_id;
      }
      set
      {
        __isset.space_id = true;
        this.space_id = value;
      }
    }

    public int Part_id
    {
      get
      {
        return part_id;
      }
      set
      {
        __isset.part_id = true;
        this.part_id = value;
      }
    }

    public nebula.Value Vertex_id
    {
      get
      {
        return vertex_id;
      }
      set
      {
        __isset.vertex_id = true;
        this.vertex_id = value;
      }
    }

    public int Tag_id
    {
      get
      {
        return tag_id;
      }
      set
      {
        __isset.tag_id = true;
        this.tag_id = value;
      }
    }

    public List<UpdatedProp> Updated_props
    {
      get
      {
        return updated_props;
      }
      set
      {
        __isset.updated_props = true;
        this.updated_props = value;
      }
    }

    public bool Insertable
    {
      get
      {
        return insertable;
      }
      set
      {
        __isset.insertable = true;
        this.insertable = value;
      }
    }

    public List<byte[]> Return_props
    {
      get
      {
        return return_props;
      }
      set
      {
        __isset.return_props = true;
        this.return_props = value;
      }
    }

    public byte[] Condition
    {
      get
      {
        return condition;
      }
      set
      {
        __isset.condition = true;
        this.condition = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool space_id;
      public bool part_id;
      public bool vertex_id;
      public bool tag_id;
      public bool updated_props;
      public bool insertable;
      public bool return_props;
      public bool condition;
    }

    public UpdateVertexRequest() {
      this.insertable = false;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.space_id = iprot.ReadI32();
              this.__isset.space_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              this.part_id = iprot.ReadI32();
              this.__isset.part_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              this.vertex_id = new nebula.Value();
              this.vertex_id.Read(iprot);
              this.__isset.vertex_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              this.tag_id = iprot.ReadI32();
              this.__isset.tag_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                this.updated_props = new List<UpdatedProp>();
                TList _list139 = iprot.ReadListBegin();
                for( int _i140 = 0; _i140 < _list139.Count; ++_i140)
                {
                  UpdatedProp _elem141 = new UpdatedProp();
                  _elem141 = new UpdatedProp();
                  _elem141.Read(iprot);
                  this.updated_props.Add(_elem141);
                }
                iprot.ReadListEnd();
              }
              this.__isset.updated_props = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              this.insertable = iprot.ReadBool();
              this.__isset.insertable = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                this.return_props = new List<byte[]>();
                TList _list142 = iprot.ReadListBegin();
                for( int _i143 = 0; _i143 < _list142.Count; ++_i143)
                {
                  byte[] _elem144 = null;
                  _elem144 = iprot.ReadBinary();
                  this.return_props.Add(_elem144);
                }
                iprot.ReadListEnd();
              }
              this.__isset.return_props = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              this.condition = iprot.ReadBinary();
              this.__isset.condition = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UpdateVertexRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.space_id) {
        field.Name = "space_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.space_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.part_id) {
        field.Name = "part_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.part_id);
        oprot.WriteFieldEnd();
      }
      if (this.vertex_id != null && __isset.vertex_id) {
        field.Name = "vertex_id";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        this.vertex_id.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.tag_id) {
        field.Name = "tag_id";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.tag_id);
        oprot.WriteFieldEnd();
      }
      if (this.updated_props != null && __isset.updated_props) {
        field.Name = "updated_props";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, this.updated_props.Count));
          foreach (UpdatedProp _iter145 in this.updated_props)
          {
            _iter145.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.insertable) {
        field.Name = "insertable";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.insertable);
        oprot.WriteFieldEnd();
      }
      if (this.return_props != null && __isset.return_props) {
        field.Name = "return_props";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.return_props.Count));
          foreach (byte[] _iter146 in this.return_props)
          {
            oprot.WriteBinary(_iter146);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (this.condition != null && __isset.condition) {
        field.Name = "condition";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.condition);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("UpdateVertexRequest(");
      sb.Append("space_id: ");
      sb.Append(this.space_id);
      sb.Append(",part_id: ");
      sb.Append(this.part_id);
      sb.Append(",vertex_id: ");
      sb.Append(this.vertex_id== null ? "<null>" : this.vertex_id.ToString());
      sb.Append(",tag_id: ");
      sb.Append(this.tag_id);
      sb.Append(",updated_props: ");
      sb.Append(this.updated_props);
      sb.Append(",insertable: ");
      sb.Append(this.insertable);
      sb.Append(",return_props: ");
      sb.Append(this.return_props);
      sb.Append(",condition: ");
      sb.Append(this.condition);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
